import {
  CSSMotionList_default,
  Keyframes_default,
  avatar_default,
  button_default,
  cascader_default,
  collapse_default,
  config_provider_default,
  createTheme,
  dropdown_default,
  es_default,
  flex_default,
  formatToken,
  genStyleUtils_default,
  get,
  ignore,
  image_default,
  input_default,
  merge,
  pickAttrs,
  progress_default,
  theme_default,
  tooltip_default,
  typography_default,
  unit,
  unitless,
  upload_default,
  useCacheToken,
  useEvent,
  useLayoutEffect_default,
  useMergedState,
  version_default
} from "./chunk-KGNMZO7L.js";
import "./chunk-IWVD3AR4.js";
import {
  ArrowUpOutlined_default,
  AudioMutedOutlined_default,
  AudioOutlined_default,
  ClearOutlined_default,
  CloseCircleFilled_default,
  CloseOutlined_default,
  EllipsisOutlined_default,
  FastColor,
  FileExcelFilled_default,
  FileImageFilled_default,
  FileMarkdownFilled_default,
  FilePdfFilled_default,
  FilePptFilled_default,
  FileTextFilled_default,
  FileWordFilled_default,
  FileZipFilled_default,
  LeftOutlined_default,
  PlusOutlined_default,
  RightOutlined_default,
  require_classnames
} from "./chunk-H5TAJDCW.js";
import "./chunk-PQML6BC5.js";
import "./chunk-4ONYKVE4.js";
import "./chunk-4FTWOKSW.js";
import {
  _extends
} from "./chunk-EQCCHGRT.js";
import {
  require_react_dom
} from "./chunk-WRD5HZVH.js";
import {
  require_react
} from "./chunk-OU5AQDZK.js";
import {
  __publicField,
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/@ant-design/x/es/version/version.js
var version_default2 = "1.4.0";

// node_modules/@ant-design/x/es/version/index.js
var version_default3 = version_default2;

// node_modules/@ant-design/x/es/actions/index.js
var import_classnames = __toESM(require_classnames());
var import_react7 = __toESM(require_react());

// node_modules/@ant-design/x/es/_util/hooks/use-x-component-config.js
var import_react2 = __toESM(require_react());

// node_modules/@ant-design/x/es/x-provider/context.js
var import_react = __toESM(require_react());
var XProviderContext = import_react.default.createContext({});
var context_default = XProviderContext;

// node_modules/@ant-design/x/es/_util/hooks/use-x-component-config.js
var defaultXComponentStyleConfig = {
  classNames: {},
  styles: {},
  className: "",
  style: {}
};
var useXComponentConfig = (component) => {
  const xProviderContext = import_react2.default.useContext(context_default);
  return import_react2.default.useMemo(() => ({
    ...defaultXComponentStyleConfig,
    ...xProviderContext[component]
  }), [xProviderContext[component]]);
};
var use_x_component_config_default = useXComponentConfig;

// node_modules/@ant-design/x/es/x-provider/index.js
var import_react4 = __toESM(require_react());

// node_modules/@ant-design/x/es/x-provider/hooks/use-x-provider-context.js
var import_react3 = __toESM(require_react());
var defaultPrefixCls = "ant";
function useXProviderContext() {
  const {
    getPrefixCls,
    direction,
    csp,
    iconPrefixCls,
    theme
  } = import_react3.default.useContext(config_provider_default.ConfigContext);
  return {
    theme,
    getPrefixCls,
    direction,
    csp,
    iconPrefixCls
  };
}
var use_x_provider_context_default = useXProviderContext;

// node_modules/@ant-design/x/es/x-provider/index.js
var XProvider = (props) => {
  const {
    attachments,
    bubble,
    conversations,
    prompts,
    sender,
    suggestion,
    thoughtChain,
    welcome,
    theme,
    ...antdConfProps
  } = props;
  const {
    theme: parentTheme
  } = use_x_provider_context_default();
  const xProviderProps = import_react4.default.useMemo(() => {
    return {
      attachments,
      bubble,
      conversations,
      prompts,
      sender,
      suggestion,
      thoughtChain,
      welcome
    };
  }, [attachments, bubble, conversations, prompts, sender, suggestion, thoughtChain, welcome]);
  const mergedTheme = import_react4.default.useMemo(() => {
    const concatTheme = {
      ...parentTheme,
      ...theme
    };
    return concatTheme;
  }, [parentTheme, theme]);
  return import_react4.default.createElement(context_default.Provider, {
    value: xProviderProps
  }, import_react4.default.createElement(config_provider_default, _extends({}, antdConfProps, {
    // Note:  we can not set `cssVar` by default.
    //        Since when developer not wrap with XProvider,
    //        the generate css is still using css var but no css var injected.
    // Origin comment: antdx enable cssVar by default, and antd v6 will enable cssVar by default
    // theme={{ cssVar: true, ...antdConfProps?.theme }}
    theme: mergedTheme
  })));
};
if (true) {
  XProvider.displayName = "XProvider";
}
var x_provider_default = XProvider;

// node_modules/@ant-design/x/es/actions/ActionMenu.js
var import_react5 = __toESM(require_react());
var findItem = (keyPath, items) => {
  const keyToFind = keyPath[0];
  for (const item of items) {
    if (item.key === keyToFind) {
      if (keyPath.length === 1) return item;
      if ("children" in item) {
        return findItem(keyPath.slice(1), item.children);
      }
    }
  }
  return null;
};
var ActionMenu = (props) => {
  const {
    onClick: onMenuClick,
    item
  } = props;
  const {
    children = [],
    triggerSubMenuAction = "hover"
  } = item;
  const {
    getPrefixCls
  } = use_x_provider_context_default();
  const prefixCls = getPrefixCls("actions", props.prefixCls);
  const icon = (item == null ? void 0 : item.icon) ?? import_react5.default.createElement(EllipsisOutlined_default, null);
  const menuProps = {
    items: children,
    onClick: ({
      key,
      keyPath,
      domEvent
    }) => {
      var _a, _b, _c;
      if ((_a = findItem(keyPath, children)) == null ? void 0 : _a.onItemClick) {
        (_c = (_b = findItem(keyPath, children)) == null ? void 0 : _b.onItemClick) == null ? void 0 : _c.call(_b, findItem(keyPath, children));
        return;
      }
      onMenuClick == null ? void 0 : onMenuClick({
        key,
        keyPath: [...keyPath, item.key],
        domEvent,
        item: findItem(keyPath, children)
      });
    }
  };
  return import_react5.default.createElement(dropdown_default, {
    menu: menuProps,
    overlayClassName: `${prefixCls}-sub-item`,
    arrow: true,
    trigger: [triggerSubMenuAction]
  }, import_react5.default.createElement("div", {
    className: `${prefixCls}-list-item`
  }, import_react5.default.createElement("div", {
    className: `${prefixCls}-list-item-icon`
  }, icon)));
};
var ActionMenu_default = ActionMenu;

// node_modules/@ant-design/x/es/theme/useToken.js
var import_react6 = __toESM(require_react());
var defaultTheme = createTheme(theme_default.defaultAlgorithm);
var preserve = {
  screenXS: true,
  screenXSMin: true,
  screenXSMax: true,
  screenSM: true,
  screenSMMin: true,
  screenSMMax: true,
  screenMD: true,
  screenMDMin: true,
  screenMDMax: true,
  screenLG: true,
  screenLGMin: true,
  screenLGMax: true,
  screenXL: true,
  screenXLMin: true,
  screenXLMax: true,
  screenXXL: true,
  screenXXLMin: true
};
var getComputedToken = (originToken, overrideToken, theme) => {
  const derivativeToken = theme.getDerivativeToken(originToken);
  const {
    override,
    ...components
  } = overrideToken;
  let mergedDerivativeToken = {
    ...derivativeToken,
    override
  };
  mergedDerivativeToken = formatToken(mergedDerivativeToken);
  if (components) {
    Object.entries(components).forEach(([key, value]) => {
      const {
        theme: componentTheme,
        ...componentTokens
      } = value;
      let mergedComponentToken = componentTokens;
      if (componentTheme) {
        mergedComponentToken = getComputedToken({
          ...mergedDerivativeToken,
          ...componentTokens
        }, {
          override: componentTokens
        }, componentTheme);
      }
      mergedDerivativeToken[key] = mergedComponentToken;
    });
  }
  return mergedDerivativeToken;
};
function useInternalToken() {
  const {
    token: rootDesignToken,
    hashed,
    theme = defaultTheme,
    override,
    cssVar
  } = import_react6.default.useContext(theme_default._internalContext);
  const [token, hashId, realToken] = useCacheToken(theme, [theme_default.defaultSeed, rootDesignToken], {
    salt: `${version_default3}-${hashed || ""}`,
    override,
    getComputedToken,
    cssVar: cssVar && {
      prefix: cssVar.prefix,
      key: cssVar.key,
      unitless,
      ignore,
      preserve
    }
  });
  return [theme, realToken, hashed ? hashId : "", token, cssVar];
}

// node_modules/@ant-design/x/es/theme/genStyleUtils.js
var {
  genStyleHooks,
  genComponentStyleHook,
  genSubStyleComponent
} = genStyleUtils_default({
  usePrefix: () => {
    const {
      getPrefixCls,
      iconPrefixCls
    } = use_x_provider_context_default();
    return {
      iconPrefixCls,
      rootPrefixCls: getPrefixCls()
    };
  },
  useToken: () => {
    const [theme, realToken, hashId, token, cssVar] = useInternalToken();
    return {
      theme,
      realToken,
      hashId,
      token,
      cssVar
    };
  },
  useCSP: () => {
    const {
      csp
    } = use_x_provider_context_default();
    return csp ?? {};
  },
  layer: {
    name: "antdx",
    dependencies: ["antd"]
  }
});

// node_modules/@ant-design/x/es/actions/style/index.js
var genActionsStyle = (token) => {
  const {
    componentCls,
    calc
  } = token;
  return {
    [componentCls]: {
      [`${componentCls}-list`]: {
        display: "inline-flex",
        flexDirection: "row",
        gap: token.paddingXS,
        color: token.colorTextDescription,
        "&-item, &-sub-item": {
          cursor: "pointer",
          padding: token.paddingXXS,
          borderRadius: token.borderRadius,
          height: token.controlHeightSM,
          width: token.controlHeightSM,
          boxSizing: "border-box",
          display: "inline-flex",
          alignItems: "center",
          justifyContent: "center",
          "&-icon": {
            display: "inline-flex",
            alignItems: "center",
            justifyContent: "center",
            fontSize: token.fontSize,
            width: "100%",
            height: "100%"
          },
          "&:hover": {
            background: token.colorBgTextHover
          }
        }
      },
      "& .border": {
        padding: `${token.paddingXS} ${token.paddingSM}`,
        gap: token.paddingSM,
        borderRadius: calc(token.borderRadiusLG).mul(1.5).equal(),
        backgroundColor: token.colorBorderSecondary,
        color: token.colorTextSecondary,
        [`${componentCls}-list-item, ${componentCls}-list-sub-item`]: {
          padding: 0,
          lineHeight: token.lineHeight,
          "&-icon": {
            fontSize: token.fontSizeLG
          },
          "&:hover": {
            opacity: 0.8
          }
        }
      },
      "& .block": {
        display: "flex"
      }
    }
  };
};
var prepareComponentToken = () => ({});
var style_default = genStyleHooks("Actions", (token) => {
  const compToken = merge(token, {});
  return [genActionsStyle(compToken)];
}, prepareComponentToken);

// node_modules/@ant-design/x/es/actions/index.js
var Actions = (props) => {
  const {
    prefixCls: customizePrefixCls,
    rootClassName = {},
    style = {},
    variant = "borderless",
    block = false,
    onClick,
    items = [],
    ...otherHtmlProps
  } = props;
  const {
    getPrefixCls
  } = use_x_provider_context_default();
  const prefixCls = getPrefixCls("actions", customizePrefixCls);
  const contextConfig = use_x_component_config_default("actions");
  const [wrapCSSVar, hashId, cssVarCls] = style_default(prefixCls);
  const mergedCls = (0, import_classnames.default)(prefixCls, contextConfig.className, rootClassName, cssVarCls, hashId);
  const mergedStyle = {
    ...contextConfig.style,
    ...style
  };
  const getTooltipNode = (node, title, tooltipProps) => {
    if (title) {
      return import_react7.default.createElement(tooltip_default, _extends({}, tooltipProps, {
        title
      }), node);
    }
    return node;
  };
  const handleItemClick = (key, item, domEvent) => {
    if (item.onItemClick) {
      item.onItemClick(item);
      return;
    }
    onClick == null ? void 0 : onClick({
      key,
      item,
      keyPath: [key],
      domEvent
    });
  };
  const renderSingleItem = (item) => {
    const {
      icon,
      label,
      key
    } = item;
    return import_react7.default.createElement("div", {
      className: (0, import_classnames.default)(`${prefixCls}-list-item`),
      onClick: (domEvent) => handleItemClick(key, item, domEvent),
      key
    }, getTooltipNode(import_react7.default.createElement("div", {
      className: `${prefixCls}-list-item-icon`
    }, icon), label));
  };
  return wrapCSSVar(import_react7.default.createElement("div", _extends({
    className: mergedCls
  }, otherHtmlProps, {
    style: mergedStyle
  }), import_react7.default.createElement("div", {
    className: (0, import_classnames.default)(`${prefixCls}-list`, variant, block)
  }, items.map((item) => {
    if ("children" in item) {
      return import_react7.default.createElement(ActionMenu_default, {
        key: item.key,
        item,
        prefixCls,
        onClick
      });
    }
    return renderSingleItem(item);
  }))));
};
if (true) {
  Actions.displayName = "Actions";
}
var actions_default = Actions;

// node_modules/@ant-design/x/es/attachments/index.js
var import_classnames6 = __toESM(require_classnames());
var import_react17 = __toESM(require_react());

// node_modules/@ant-design/x/es/attachments/DropArea.js
var import_classnames2 = __toESM(require_classnames());
var import_react9 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/@ant-design/x/es/attachments/context.js
var import_react8 = __toESM(require_react());
var AttachmentContext = import_react8.default.createContext(null);

// node_modules/@ant-design/x/es/attachments/DropArea.js
function DropArea(props) {
  const {
    getDropContainer,
    className,
    prefixCls,
    children
  } = props;
  const {
    disabled
  } = import_react9.default.useContext(AttachmentContext);
  const [container, setContainer] = import_react9.default.useState();
  const [showArea, setShowArea] = import_react9.default.useState(null);
  import_react9.default.useEffect(() => {
    const nextContainer = getDropContainer == null ? void 0 : getDropContainer();
    if (container !== nextContainer) {
      setContainer(nextContainer);
    }
  }, [getDropContainer]);
  import_react9.default.useEffect(() => {
    if (container) {
      const onDragEnter = () => {
        setShowArea(true);
      };
      const onDragOver = (e) => {
        e.preventDefault();
      };
      const onDragLeave = (e) => {
        if (!e.relatedTarget) {
          setShowArea(false);
        }
      };
      const onDrop = (e) => {
        setShowArea(false);
        e.preventDefault();
      };
      document.addEventListener("dragenter", onDragEnter);
      document.addEventListener("dragover", onDragOver);
      document.addEventListener("dragleave", onDragLeave);
      document.addEventListener("drop", onDrop);
      return () => {
        document.removeEventListener("dragenter", onDragEnter);
        document.removeEventListener("dragover", onDragOver);
        document.removeEventListener("dragleave", onDragLeave);
        document.removeEventListener("drop", onDrop);
      };
    }
  }, [!!container]);
  const showDropdown = getDropContainer && container && !disabled;
  if (!showDropdown) {
    return null;
  }
  const areaCls = `${prefixCls}-drop-area`;
  return (0, import_react_dom.createPortal)(import_react9.default.createElement("div", {
    className: (0, import_classnames2.default)(areaCls, className, {
      [`${areaCls}-on-body`]: container.tagName === "BODY"
    }),
    style: {
      display: showArea ? "block" : "none"
    }
  }, children), container);
}

// node_modules/@ant-design/x/es/attachments/FileList/index.js
var import_classnames4 = __toESM(require_classnames());
var import_react15 = __toESM(require_react());

// node_modules/@ant-design/x/es/attachments/SilentUploader.js
var import_react10 = __toESM(require_react());
function SilentUploader(props, ref) {
  const {
    children,
    upload,
    rootClassName
  } = props;
  const uploadRef = import_react10.default.useRef(null);
  import_react10.default.useImperativeHandle(ref, () => uploadRef.current);
  return import_react10.default.createElement(upload_default, _extends({}, upload, {
    showUploadList: false,
    rootClassName,
    ref: uploadRef
  }), children);
}
var SilentUploader_default = import_react10.default.forwardRef(SilentUploader);

// node_modules/@ant-design/x/es/attachments/FileList/FileListCard.js
var import_classnames3 = __toESM(require_classnames());
var import_react14 = __toESM(require_react());

// node_modules/@ant-design/x/es/attachments/style/fileCard.js
var genFileCardStyle = (token) => {
  const {
    componentCls,
    antCls,
    calc
  } = token;
  const cardCls = `${componentCls}-list-card`;
  const cardHeight = calc(token.fontSize).mul(token.lineHeight).mul(2).add(token.paddingSM).add(token.paddingSM).equal();
  return {
    [cardCls]: {
      borderRadius: token.borderRadius,
      position: "relative",
      background: token.colorFillContent,
      borderWidth: token.lineWidth,
      borderStyle: "solid",
      borderColor: "transparent",
      flex: "none",
      // =============================== Desc ================================
      [`${cardCls}-name,${cardCls}-desc`]: {
        display: "flex",
        flexWrap: "nowrap",
        maxWidth: "100%"
      },
      [`${cardCls}-ellipsis-prefix`]: {
        flex: "0 1 auto",
        minWidth: 0,
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      },
      [`${cardCls}-ellipsis-suffix`]: {
        flex: "none"
      },
      // ============================= Overview ==============================
      "&-type-overview": {
        padding: calc(token.paddingSM).sub(token.lineWidth).equal(),
        paddingInlineStart: calc(token.padding).add(token.lineWidth).equal(),
        display: "flex",
        flexWrap: "nowrap",
        gap: token.paddingXS,
        alignItems: "flex-start",
        width: 236,
        // Icon
        [`${cardCls}-icon`]: {
          fontSize: calc(token.fontSizeLG).mul(2).equal(),
          lineHeight: 1,
          paddingTop: calc(token.paddingXXS).mul(1.5).equal(),
          flex: "none"
        },
        // Content
        [`${cardCls}-content`]: {
          flex: "auto",
          minWidth: 0,
          display: "flex",
          flexDirection: "column",
          alignItems: "stretch"
        },
        [`${cardCls}-desc`]: {
          color: token.colorTextTertiary
        }
      },
      // ============================== Preview ==============================
      "&-type-preview": {
        width: cardHeight,
        height: cardHeight,
        lineHeight: 1,
        display: "flex",
        alignItems: "center",
        [`&:not(${cardCls}-status-error)`]: {
          border: 0
        },
        // Img
        [`${antCls}-image`]: {
          width: "100%",
          height: "100%",
          borderRadius: "inherit",
          img: {
            height: "100%",
            objectFit: "cover",
            borderRadius: "inherit"
          }
        },
        // Mask
        [`${cardCls}-img-mask`]: {
          position: "absolute",
          inset: 0,
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          background: `rgba(0, 0, 0, ${token.opacityLoading})`,
          borderRadius: "inherit"
        },
        // Error
        [`&${cardCls}-status-error`]: {
          [`img, ${cardCls}-img-mask`]: {
            borderRadius: calc(token.borderRadius).sub(token.lineWidth).equal()
          },
          [`${cardCls}-desc`]: {
            paddingInline: token.paddingXXS
          }
        },
        // Progress
        [`${cardCls}-progress`]: {}
      },
      // ============================ Remove Icon ============================
      [`${cardCls}-remove`]: {
        position: "absolute",
        top: 0,
        insetInlineEnd: 0,
        border: 0,
        padding: token.paddingXXS,
        background: "transparent",
        lineHeight: 1,
        transform: "translate(50%, -50%)",
        fontSize: token.fontSize,
        cursor: "pointer",
        opacity: token.opacityLoading,
        display: "none",
        "&:dir(rtl)": {
          transform: "translate(-50%, -50%)"
        },
        "&:hover": {
          opacity: 1
        },
        "&:active": {
          opacity: token.opacityLoading
        }
      },
      [`&:hover ${cardCls}-remove`]: {
        display: "block"
      },
      // ============================== Status ===============================
      "&-status-error": {
        borderColor: token.colorError,
        [`${cardCls}-desc`]: {
          color: token.colorError
        }
      },
      // ============================== Motion ===============================
      "&-motion": {
        transition: ["opacity", "width", "margin", "padding"].map((prop) => `${prop} ${token.motionDurationSlow}`).join(","),
        "&-appear-start": {
          width: 0,
          transition: "none"
        },
        "&-leave-active": {
          opacity: 0,
          width: 0,
          paddingInline: 0,
          borderInlineWidth: 0,
          marginInlineEnd: calc(token.paddingSM).mul(-1).equal()
        }
      }
    }
  };
};
var fileCard_default = genFileCardStyle;

// node_modules/@ant-design/x/es/attachments/style/index.js
var anyBoxSizing = {
  "&, *": {
    boxSizing: "border-box"
  }
};
var genAttachmentsStyle = (token) => {
  const {
    componentCls,
    calc,
    antCls
  } = token;
  const dropAreaCls = `${componentCls}-drop-area`;
  const placeholderCls = `${componentCls}-placeholder`;
  return {
    // ============================== Full Screen ==============================
    [dropAreaCls]: {
      position: "absolute",
      inset: 0,
      zIndex: token.zIndexPopupBase,
      ...anyBoxSizing,
      "&-on-body": {
        position: "fixed",
        inset: 0
      },
      "&-hide-placement": {
        [`${placeholderCls}-inner`]: {
          display: "none"
        }
      },
      [placeholderCls]: {
        padding: 0
      }
    },
    "&": {
      // ============================= Placeholder =============================
      [placeholderCls]: {
        height: "100%",
        borderRadius: token.borderRadius,
        borderWidth: token.lineWidthBold,
        borderStyle: "dashed",
        borderColor: "transparent",
        padding: token.padding,
        position: "relative",
        backdropFilter: "blur(10px)",
        background: token.colorBgPlaceholderHover,
        ...anyBoxSizing,
        [`${antCls}-upload-wrapper ${antCls}-upload${antCls}-upload-btn`]: {
          padding: 0
        },
        [`&${placeholderCls}-drag-in`]: {
          borderColor: token.colorPrimaryHover
        },
        [`&${placeholderCls}-disabled`]: {
          opacity: 0.25,
          pointerEvents: "none"
        },
        [`${placeholderCls}-inner`]: {
          gap: calc(token.paddingXXS).div(2).equal()
        },
        [`${placeholderCls}-icon`]: {
          fontSize: token.fontSizeHeading2,
          lineHeight: 1
        },
        [`${placeholderCls}-title${placeholderCls}-title`]: {
          margin: 0,
          fontSize: token.fontSize,
          lineHeight: token.lineHeight
        },
        [`${placeholderCls}-description`]: {}
      }
    }
  };
};
var genFileListStyle = (token) => {
  const {
    componentCls,
    calc
  } = token;
  const fileListCls = `${componentCls}-list`;
  const cardHeight = calc(token.fontSize).mul(token.lineHeight).mul(2).add(token.paddingSM).add(token.paddingSM).equal();
  return {
    [componentCls]: {
      position: "relative",
      width: "100%",
      ...anyBoxSizing,
      // =============================== File List ===============================
      [fileListCls]: {
        display: "flex",
        flexWrap: "wrap",
        gap: token.paddingSM,
        fontSize: token.fontSize,
        lineHeight: token.lineHeight,
        color: token.colorText,
        paddingBlock: token.paddingSM,
        paddingInline: token.padding,
        width: "100%",
        background: token.colorBgContainer,
        // Hide scrollbar
        scrollbarWidth: "none",
        "-ms-overflow-style": "none",
        "&::-webkit-scrollbar": {
          display: "none"
        },
        // Scroll
        "&-overflow-scrollX, &-overflow-scrollY": {
          "&:before, &:after": {
            content: '""',
            position: "absolute",
            opacity: 0,
            transition: `opacity ${token.motionDurationSlow}`,
            zIndex: 1
          }
        },
        "&-overflow-ping-start:before": {
          opacity: 1
        },
        "&-overflow-ping-end:after": {
          opacity: 1
        },
        "&-overflow-scrollX": {
          overflowX: "auto",
          overflowY: "hidden",
          flexWrap: "nowrap",
          "&:before, &:after": {
            insetBlock: 0,
            width: 8
          },
          "&:before": {
            insetInlineStart: 0,
            background: `linear-gradient(to right, rgba(0,0,0,0.06), rgba(0,0,0,0));`
          },
          "&:after": {
            insetInlineEnd: 0,
            background: `linear-gradient(to left, rgba(0,0,0,0.06), rgba(0,0,0,0));`
          },
          "&:dir(rtl)": {
            "&:before": {
              background: `linear-gradient(to left, rgba(0,0,0,0.06), rgba(0,0,0,0));`
            },
            "&:after": {
              background: `linear-gradient(to right, rgba(0,0,0,0.06), rgba(0,0,0,0));`
            }
          }
        },
        "&-overflow-scrollY": {
          overflowX: "hidden",
          overflowY: "auto",
          maxHeight: calc(cardHeight).mul(3).equal(),
          "&:before, &:after": {
            insetInline: 0,
            height: 8
          },
          "&:before": {
            insetBlockStart: 0,
            background: `linear-gradient(to bottom, rgba(0,0,0,0.06), rgba(0,0,0,0));`
          },
          "&:after": {
            insetBlockEnd: 0,
            background: `linear-gradient(to top, rgba(0,0,0,0.06), rgba(0,0,0,0));`
          }
        },
        // ======================================================================
        // ==                              Upload                              ==
        // ======================================================================
        "&-upload-btn": {
          width: cardHeight,
          height: cardHeight,
          fontSize: token.fontSizeHeading2,
          color: "#999"
        },
        // ======================================================================
        // ==                             PrevNext                             ==
        // ======================================================================
        "&-prev-btn, &-next-btn": {
          position: "absolute",
          top: "50%",
          transform: "translateY(-50%)",
          boxShadow: token.boxShadowTertiary,
          opacity: 0,
          pointerEvents: "none"
        },
        "&-prev-btn": {
          left: {
            _skip_check_: true,
            value: token.padding
          }
        },
        "&-next-btn": {
          right: {
            _skip_check_: true,
            value: token.padding
          }
        },
        "&:dir(ltr)": {
          [`&${fileListCls}-overflow-ping-start ${fileListCls}-prev-btn`]: {
            opacity: 1,
            pointerEvents: "auto"
          },
          [`&${fileListCls}-overflow-ping-end ${fileListCls}-next-btn`]: {
            opacity: 1,
            pointerEvents: "auto"
          }
        },
        "&:dir(rtl)": {
          [`&${fileListCls}-overflow-ping-end ${fileListCls}-prev-btn`]: {
            opacity: 1,
            pointerEvents: "auto"
          },
          [`&${fileListCls}-overflow-ping-start ${fileListCls}-next-btn`]: {
            opacity: 1,
            pointerEvents: "auto"
          }
        }
      }
    }
  };
};
var prepareComponentToken2 = (token) => {
  const {
    colorBgContainer
  } = token;
  const colorBgPlaceholderHover = new FastColor(colorBgContainer).setA(0.85);
  return {
    colorBgPlaceholderHover: colorBgPlaceholderHover.toRgbString()
  };
};
var style_default2 = genStyleHooks("Attachments", (token) => {
  const compToken = merge(token, {});
  return [genAttachmentsStyle(compToken), genFileListStyle(compToken), fileCard_default(compToken)];
}, prepareComponentToken2);

// node_modules/@ant-design/x/es/attachments/util.js
var isImageFileType = (type) => type.indexOf("image/") === 0;
var MEASURE_SIZE = 200;
function previewImage(file) {
  return new Promise((resolve) => {
    if (!file || !file.type || !isImageFileType(file.type)) {
      resolve("");
      return;
    }
    const img = new Image();
    img.onload = () => {
      const {
        width,
        height
      } = img;
      const ratio = width / height;
      const MEASURE_SIZE_WIDTH = ratio > 1 ? MEASURE_SIZE : MEASURE_SIZE * ratio;
      const MEASURE_SIZE_HEIGHT = ratio > 1 ? MEASURE_SIZE / ratio : MEASURE_SIZE;
      const canvas = document.createElement("canvas");
      canvas.width = MEASURE_SIZE_WIDTH;
      canvas.height = MEASURE_SIZE_HEIGHT;
      canvas.style.cssText = `position: fixed; left: 0; top: 0; width: ${MEASURE_SIZE_WIDTH}px; height: ${MEASURE_SIZE_HEIGHT}px; z-index: 9999; display: none;`;
      document.body.appendChild(canvas);
      const ctx = canvas.getContext("2d");
      ctx.drawImage(img, 0, 0, MEASURE_SIZE_WIDTH, MEASURE_SIZE_HEIGHT);
      const dataURL = canvas.toDataURL();
      document.body.removeChild(canvas);
      window.URL.revokeObjectURL(img.src);
      resolve(dataURL);
    };
    img.crossOrigin = "anonymous";
    if (file.type.startsWith("image/svg+xml")) {
      const reader = new FileReader();
      reader.onload = () => {
        if (reader.result && typeof reader.result === "string") {
          img.src = reader.result;
        }
      };
      reader.readAsDataURL(file);
    } else if (file.type.startsWith("image/gif")) {
      const reader = new FileReader();
      reader.onload = () => {
        if (reader.result) {
          resolve(reader.result);
        }
      };
      reader.readAsDataURL(file);
    } else {
      img.src = window.URL.createObjectURL(file);
    }
  });
}

// node_modules/@ant-design/x/es/attachments/FileList/AudioIcon.js
var import_react11 = __toESM(require_react());
function AudioIcon() {
  return import_react11.default.createElement("svg", {
    width: "1em",
    height: "1em",
    viewBox: "0 0 16 16",
    version: "1.1",
    xmlns: "http://www.w3.org/2000/svg"
    //xmlnsXlink="http://www.w3.org/1999/xlink"
  }, import_react11.default.createElement("title", null, "audio"), import_react11.default.createElement("g", {
    stroke: "none",
    strokeWidth: "1",
    fill: "none",
    fillRule: "evenodd"
  }, import_react11.default.createElement("path", {
    d: "M14.1178571,4.0125 C14.225,4.11964286 14.2857143,4.26428571 14.2857143,4.41607143 L14.2857143,15.4285714 C14.2857143,15.7446429 14.0303571,16 13.7142857,16 L2.28571429,16 C1.96964286,16 1.71428571,15.7446429 1.71428571,15.4285714 L1.71428571,0.571428571 C1.71428571,0.255357143 1.96964286,0 2.28571429,0 L9.86964286,0 C10.0214286,0 10.1678571,0.0607142857 10.275,0.167857143 L14.1178571,4.0125 Z M10.7315824,7.11216117 C10.7428131,7.15148751 10.7485063,7.19218979 10.7485063,7.23309113 L10.7485063,8.07742614 C10.7484199,8.27364959 10.6183424,8.44607275 10.4296853,8.50003683 L8.32984514,9.09986306 L8.32984514,11.7071803 C8.32986605,12.5367078 7.67249692,13.217028 6.84345686,13.2454634 L6.79068592,13.2463395 C6.12766108,13.2463395 5.53916361,12.8217001 5.33010655,12.1924966 C5.1210495,11.563293 5.33842118,10.8709227 5.86959669,10.4741173 C6.40077221,10.0773119 7.12636292,10.0652587 7.67042486,10.4442027 L7.67020842,7.74937024 L7.68449368,7.74937024 C7.72405122,7.59919041 7.83988806,7.48101083 7.98924584,7.4384546 L10.1880418,6.81004755 C10.42156,6.74340323 10.6648954,6.87865515 10.7315824,7.11216117 Z M9.60714286,1.31785714 L12.9678571,4.67857143 L9.60714286,4.67857143 L9.60714286,1.31785714 Z",
    fill: "currentColor"
  })));
}

// node_modules/@ant-design/x/es/attachments/FileList/Progress.js
var import_react12 = __toESM(require_react());
function Progress(props) {
  const {
    percent
  } = props;
  const {
    token
  } = theme_default.useToken();
  return import_react12.default.createElement(progress_default, {
    type: "circle",
    percent,
    size: token.fontSizeHeading2 * 2,
    strokeColor: "#FFF",
    trailColor: "rgba(255, 255, 255, 0.3)",
    format: (ptg) => import_react12.default.createElement("span", {
      style: {
        color: "#FFF"
      }
    }, (ptg || 0).toFixed(0), "%")
  });
}

// node_modules/@ant-design/x/es/attachments/FileList/VideoIcon.js
var import_react13 = __toESM(require_react());
function VideoIcon() {
  return import_react13.default.createElement("svg", {
    width: "1em",
    height: "1em",
    viewBox: "0 0 16 16",
    version: "1.1",
    xmlns: "http://www.w3.org/2000/svg"
    // xmlnsXlink="http://www.w3.org/1999/xlink"
  }, import_react13.default.createElement("title", null, "video"), import_react13.default.createElement("g", {
    stroke: "none",
    strokeWidth: "1",
    fill: "none",
    fillRule: "evenodd"
  }, import_react13.default.createElement("path", {
    d: "M14.1178571,4.0125 C14.225,4.11964286 14.2857143,4.26428571 14.2857143,4.41607143 L14.2857143,15.4285714 C14.2857143,15.7446429 14.0303571,16 13.7142857,16 L2.28571429,16 C1.96964286,16 1.71428571,15.7446429 1.71428571,15.4285714 L1.71428571,0.571428571 C1.71428571,0.255357143 1.96964286,0 2.28571429,0 L9.86964286,0 C10.0214286,0 10.1678571,0.0607142857 10.275,0.167857143 L14.1178571,4.0125 Z M12.9678571,4.67857143 L9.60714286,1.31785714 L9.60714286,4.67857143 L12.9678571,4.67857143 Z M10.5379461,10.3101106 L6.68957555,13.0059749 C6.59910784,13.0693494 6.47439406,13.0473861 6.41101953,12.9569184 C6.3874624,12.9232903 6.37482581,12.8832269 6.37482581,12.8421686 L6.37482581,7.45043999 C6.37482581,7.33998304 6.46436886,7.25043999 6.57482581,7.25043999 C6.61588409,7.25043999 6.65594753,7.26307658 6.68957555,7.28663371 L10.5379461,9.98249803 C10.6284138,10.0458726 10.6503772,10.1705863 10.5870027,10.2610541 C10.5736331,10.2801392 10.5570312,10.2967411 10.5379461,10.3101106 Z",
    fill: "currentColor"
  })));
}

// node_modules/@ant-design/x/es/attachments/FileList/FileListCard.js
var EMPTY = " ";
var DEFAULT_ICON_COLOR = "#8c8c8c";
var IMG_EXTS = ["png", "jpg", "jpeg", "gif", "bmp", "webp", "svg"];
var PRESET_FILE_ICONS = [{
  icon: import_react14.default.createElement(FileExcelFilled_default, null),
  color: "#22b35e",
  ext: ["xlsx", "xls"]
}, {
  icon: import_react14.default.createElement(FileImageFilled_default, null),
  color: DEFAULT_ICON_COLOR,
  ext: IMG_EXTS
}, {
  icon: import_react14.default.createElement(FileMarkdownFilled_default, null),
  color: DEFAULT_ICON_COLOR,
  ext: ["md", "mdx"]
}, {
  icon: import_react14.default.createElement(FilePdfFilled_default, null),
  color: "#ff4d4f",
  ext: ["pdf"]
}, {
  icon: import_react14.default.createElement(FilePptFilled_default, null),
  color: "#ff6e31",
  ext: ["ppt", "pptx"]
}, {
  icon: import_react14.default.createElement(FileWordFilled_default, null),
  color: "#1677ff",
  ext: ["doc", "docx"]
}, {
  icon: import_react14.default.createElement(FileZipFilled_default, null),
  color: "#fab714",
  ext: ["zip", "rar", "7z", "tar", "gz"]
}, {
  icon: import_react14.default.createElement(VideoIcon, null),
  color: "#ff4d4f",
  ext: ["mp4", "avi", "mov", "wmv", "flv", "mkv"]
}, {
  icon: import_react14.default.createElement(AudioIcon, null),
  color: "#8c8c8c",
  ext: ["mp3", "wav", "flac", "ape", "aac", "ogg"]
}];
function matchExt(suffix, ext) {
  return ext.some((e) => suffix.toLowerCase() === `.${e}`);
}
function getSize(size) {
  let retSize = size;
  const units = ["B", "KB", "MB", "GB", "TB", "PB", "EB"];
  let unitIndex = 0;
  while (retSize >= 1024 && unitIndex < units.length - 1) {
    retSize /= 1024;
    unitIndex++;
  }
  return `${retSize.toFixed(0)} ${units[unitIndex]}`;
}
function FileListCard(props, ref) {
  const {
    prefixCls: customizePrefixCls,
    item,
    onRemove,
    className,
    style,
    imageProps
  } = props;
  const context = import_react14.default.useContext(AttachmentContext);
  const {
    disabled
  } = context || {};
  const {
    name,
    size,
    percent,
    status = "done",
    description
  } = item;
  const {
    getPrefixCls
  } = use_x_provider_context_default();
  const prefixCls = getPrefixCls("attachment", customizePrefixCls);
  const cardCls = `${prefixCls}-list-card`;
  const [wrapCSSVar, hashId, cssVarCls] = style_default2(prefixCls);
  const [namePrefix, nameSuffix] = import_react14.default.useMemo(() => {
    const nameStr = name || "";
    const match = nameStr.match(/^(.*)\.[^.]+$/);
    return match ? [match[1], nameStr.slice(match[1].length)] : [nameStr, ""];
  }, [name]);
  const isImg = import_react14.default.useMemo(() => matchExt(nameSuffix, IMG_EXTS), [nameSuffix]);
  const desc = import_react14.default.useMemo(() => {
    if (description) {
      return description;
    }
    if (status === "uploading") {
      return `${percent || 0}%`;
    }
    if (status === "error") {
      return item.response || EMPTY;
    }
    return size ? getSize(size) : EMPTY;
  }, [status, percent]);
  const [icon, iconColor] = import_react14.default.useMemo(() => {
    for (const {
      ext,
      icon: icon2,
      color
    } of PRESET_FILE_ICONS) {
      if (matchExt(nameSuffix, ext)) {
        return [icon2, color];
      }
    }
    return [import_react14.default.createElement(FileTextFilled_default, {
      key: "defaultIcon"
    }), DEFAULT_ICON_COLOR];
  }, [nameSuffix]);
  const [previewImg, setPreviewImg] = import_react14.default.useState();
  import_react14.default.useEffect(() => {
    if (item.originFileObj) {
      let synced = true;
      previewImage(item.originFileObj).then((url) => {
        if (synced) {
          setPreviewImg(url);
        }
      });
      return () => {
        synced = false;
      };
    }
    setPreviewImg(void 0);
  }, [item.originFileObj]);
  let content = null;
  const previewUrl = item.thumbUrl || item.url || previewImg;
  const isImgPreview = isImg && (item.originFileObj || previewUrl);
  if (isImgPreview) {
    content = import_react14.default.createElement(import_react14.default.Fragment, null, previewUrl && import_react14.default.createElement(image_default, _extends({
      alt: "preview",
      src: previewUrl
    }, imageProps)), status !== "done" && import_react14.default.createElement("div", {
      className: `${cardCls}-img-mask`
    }, status === "uploading" && percent !== void 0 && import_react14.default.createElement(Progress, {
      percent,
      prefixCls: cardCls
    }), status === "error" && import_react14.default.createElement("div", {
      className: `${cardCls}-desc`
    }, import_react14.default.createElement("div", {
      className: `${cardCls}-ellipsis-prefix`
    }, desc))));
  } else {
    content = import_react14.default.createElement(import_react14.default.Fragment, null, import_react14.default.createElement("div", {
      className: `${cardCls}-icon`,
      style: {
        color: iconColor
      }
    }, icon), import_react14.default.createElement("div", {
      className: `${cardCls}-content`
    }, import_react14.default.createElement("div", {
      className: `${cardCls}-name`
    }, import_react14.default.createElement("div", {
      className: `${cardCls}-ellipsis-prefix`
    }, namePrefix ?? EMPTY), import_react14.default.createElement("div", {
      className: `${cardCls}-ellipsis-suffix`
    }, nameSuffix)), import_react14.default.createElement("div", {
      className: `${cardCls}-desc`
    }, import_react14.default.createElement("div", {
      className: `${cardCls}-ellipsis-prefix`
    }, desc))));
  }
  return wrapCSSVar(import_react14.default.createElement("div", {
    className: (0, import_classnames3.default)(cardCls, {
      [`${cardCls}-status-${status}`]: status,
      [`${cardCls}-type-preview`]: isImgPreview,
      [`${cardCls}-type-overview`]: !isImgPreview
    }, className, hashId, cssVarCls),
    style,
    ref
  }, content, !disabled && onRemove && import_react14.default.createElement("button", {
    type: "button",
    className: `${cardCls}-remove`,
    onClick: () => {
      onRemove(item);
    }
  }, import_react14.default.createElement(CloseCircleFilled_default, null))));
}
var FileListCard_default = import_react14.default.forwardRef(FileListCard);

// node_modules/@ant-design/x/es/attachments/FileList/index.js
var TOLERANCE = 1;
function FileList(props) {
  const {
    prefixCls,
    items,
    onRemove,
    overflow,
    upload,
    listClassName,
    listStyle,
    itemClassName,
    itemStyle,
    imageProps
  } = props;
  const listCls = `${prefixCls}-list`;
  const containerRef = import_react15.default.useRef(null);
  const [firstMount, setFirstMount] = import_react15.default.useState(false);
  const {
    disabled
  } = import_react15.default.useContext(AttachmentContext);
  import_react15.default.useEffect(() => {
    setFirstMount(true);
    return () => {
      setFirstMount(false);
    };
  }, []);
  const [pingStart, setPingStart] = import_react15.default.useState(false);
  const [pingEnd, setPingEnd] = import_react15.default.useState(false);
  const checkPing = () => {
    const containerEle = containerRef.current;
    if (!containerEle) {
      return;
    }
    if (overflow === "scrollX") {
      setPingStart(Math.abs(containerEle.scrollLeft) >= TOLERANCE);
      setPingEnd(containerEle.scrollWidth - containerEle.clientWidth - Math.abs(containerEle.scrollLeft) >= TOLERANCE);
    } else if (overflow === "scrollY") {
      setPingStart(containerEle.scrollTop !== 0);
      setPingEnd(containerEle.scrollHeight - containerEle.clientHeight !== containerEle.scrollTop);
    }
  };
  import_react15.default.useEffect(() => {
    checkPing();
  }, [overflow, items.length]);
  const onScrollOffset = (offset) => {
    const containerEle = containerRef.current;
    if (containerEle) {
      containerEle.scrollTo({
        left: containerEle.scrollLeft + offset * containerEle.clientWidth,
        behavior: "smooth"
      });
    }
  };
  const onScrollLeft = () => {
    onScrollOffset(-1);
  };
  const onScrollRight = () => {
    onScrollOffset(1);
  };
  return import_react15.default.createElement("div", {
    className: (0, import_classnames4.default)(listCls, {
      [`${listCls}-overflow-${props.overflow}`]: overflow,
      [`${listCls}-overflow-ping-start`]: pingStart,
      [`${listCls}-overflow-ping-end`]: pingEnd
    }, listClassName),
    ref: containerRef,
    onScroll: checkPing,
    style: listStyle
  }, import_react15.default.createElement(CSSMotionList_default, {
    keys: items.map((item) => ({
      key: item.uid,
      item
    })),
    motionName: `${listCls}-card-motion`,
    component: false,
    motionAppear: firstMount,
    motionLeave: true,
    motionEnter: true
  }, ({
    key,
    item,
    className: motionCls,
    style: motionStyle
  }) => {
    return import_react15.default.createElement(FileListCard_default, {
      key,
      prefixCls,
      item,
      onRemove,
      className: (0, import_classnames4.default)(motionCls, itemClassName),
      imageProps,
      style: {
        ...motionStyle,
        ...itemStyle
      }
    });
  }), !disabled && import_react15.default.createElement(SilentUploader_default, {
    upload
  }, import_react15.default.createElement(button_default, {
    className: `${listCls}-upload-btn`,
    type: "dashed"
  }, import_react15.default.createElement(PlusOutlined_default, {
    className: `${listCls}-upload-btn-icon`
  }))), overflow === "scrollX" && import_react15.default.createElement(import_react15.default.Fragment, null, import_react15.default.createElement(button_default, {
    size: "small",
    shape: "circle",
    className: `${listCls}-prev-btn`,
    icon: import_react15.default.createElement(LeftOutlined_default, null),
    onClick: onScrollLeft
  }), import_react15.default.createElement(button_default, {
    size: "small",
    shape: "circle",
    className: `${listCls}-next-btn`,
    icon: import_react15.default.createElement(RightOutlined_default, null),
    onClick: onScrollRight
  })));
}

// node_modules/@ant-design/x/es/attachments/PlaceholderUploader.js
var import_classnames5 = __toESM(require_classnames());
var import_react16 = __toESM(require_react());
function Placeholder(props, ref) {
  const {
    prefixCls,
    placeholder = {},
    upload,
    className,
    style
  } = props;
  const placeholderCls = `${prefixCls}-placeholder`;
  const placeholderConfig = placeholder || {};
  const {
    disabled
  } = import_react16.default.useContext(AttachmentContext);
  const [dragIn, setDragIn] = import_react16.default.useState(false);
  const onDragEnter = () => {
    setDragIn(true);
  };
  const onDragLeave = (e) => {
    if (!e.currentTarget.contains(e.relatedTarget)) {
      setDragIn(false);
    }
  };
  const onDrop = () => {
    setDragIn(false);
  };
  const node = import_react16.default.isValidElement(placeholder) ? placeholder : import_react16.default.createElement(flex_default, {
    align: "center",
    justify: "center",
    vertical: true,
    className: `${placeholderCls}-inner`
  }, import_react16.default.createElement(typography_default.Text, {
    className: `${placeholderCls}-icon`
  }, placeholderConfig.icon), import_react16.default.createElement(typography_default.Title, {
    className: `${placeholderCls}-title`,
    level: 5
  }, placeholderConfig.title), import_react16.default.createElement(typography_default.Text, {
    className: `${placeholderCls}-description`,
    type: "secondary"
  }, placeholderConfig.description));
  return import_react16.default.createElement("div", {
    className: (0, import_classnames5.default)(placeholderCls, {
      [`${placeholderCls}-drag-in`]: dragIn,
      [`${placeholderCls}-disabled`]: disabled
    }, className),
    onDragEnter,
    onDragLeave,
    onDrop,
    "aria-hidden": disabled,
    style
  }, import_react16.default.createElement(upload_default.Dragger, _extends({
    showUploadList: false
  }, upload, {
    ref,
    style: {
      padding: 0,
      border: 0,
      background: "transparent"
    }
  }), node));
}
var PlaceholderUploader_default = import_react16.default.forwardRef(Placeholder);

// node_modules/@ant-design/x/es/attachments/index.js
function Attachments(props, ref) {
  const {
    prefixCls: customizePrefixCls,
    rootClassName,
    rootStyle,
    className,
    style,
    items,
    children,
    getDropContainer,
    placeholder,
    onChange,
    onRemove,
    overflow,
    imageProps,
    disabled,
    classNames: classNames6 = {},
    styles = {},
    ...uploadProps
  } = props;
  const {
    getPrefixCls,
    direction
  } = use_x_provider_context_default();
  const prefixCls = getPrefixCls("attachment", customizePrefixCls);
  const contextConfig = use_x_component_config_default("attachments");
  const {
    classNames: contextClassNames,
    styles: contextStyles
  } = contextConfig;
  const containerRef = import_react17.default.useRef(null);
  const uploadRef = import_react17.default.useRef(null);
  import_react17.default.useImperativeHandle(ref, () => ({
    nativeElement: containerRef.current,
    upload: (file) => {
      var _a, _b;
      const fileInput = (_b = (_a = uploadRef.current) == null ? void 0 : _a.nativeElement) == null ? void 0 : _b.querySelector('input[type="file"]');
      if (fileInput) {
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        fileInput.files = dataTransfer.files;
        fileInput.dispatchEvent(new Event("change", {
          bubbles: true
        }));
      }
    }
  }));
  const [wrapCSSVar, hashId, cssVarCls] = style_default2(prefixCls);
  const cssinjsCls = (0, import_classnames6.default)(hashId, cssVarCls);
  const [fileList, setFileList] = useMergedState([], {
    value: items
  });
  const triggerChange = useEvent((info) => {
    setFileList(info.fileList);
    onChange == null ? void 0 : onChange(info);
  });
  const mergedUploadProps = {
    ...uploadProps,
    fileList,
    onChange: triggerChange
  };
  const onItemRemove = (item) => Promise.resolve(typeof onRemove === "function" ? onRemove(item) : onRemove).then((ret) => {
    if (ret === false) {
      return;
    }
    const newFileList = fileList.filter((fileItem) => fileItem.uid !== item.uid);
    triggerChange({
      file: {
        ...item,
        status: "removed"
      },
      fileList: newFileList
    });
  });
  let renderChildren;
  const getPlaceholderNode = (type, props2, ref2) => {
    const placeholderContent = typeof placeholder === "function" ? placeholder(type) : placeholder;
    return import_react17.default.createElement(PlaceholderUploader_default, {
      placeholder: placeholderContent,
      upload: mergedUploadProps,
      prefixCls,
      className: (0, import_classnames6.default)(contextClassNames.placeholder, classNames6.placeholder),
      style: {
        ...contextStyles.placeholder,
        ...styles.placeholder,
        ...props2 == null ? void 0 : props2.style
      },
      ref: ref2
    });
  };
  if (children) {
    renderChildren = import_react17.default.createElement(import_react17.default.Fragment, null, import_react17.default.createElement(SilentUploader_default, {
      upload: mergedUploadProps,
      rootClassName,
      ref: uploadRef
    }, children), import_react17.default.createElement(DropArea, {
      getDropContainer,
      prefixCls,
      className: (0, import_classnames6.default)(cssinjsCls, rootClassName)
    }, getPlaceholderNode("drop")));
  } else {
    const hasFileList = fileList.length > 0;
    renderChildren = import_react17.default.createElement("div", {
      className: (0, import_classnames6.default)(prefixCls, cssinjsCls, {
        [`${prefixCls}-rtl`]: direction === "rtl"
      }, className, rootClassName),
      style: {
        ...rootStyle,
        ...style
      },
      dir: direction || "ltr",
      ref: containerRef
    }, import_react17.default.createElement(FileList, {
      prefixCls,
      items: fileList,
      onRemove: onItemRemove,
      overflow,
      upload: mergedUploadProps,
      listClassName: (0, import_classnames6.default)(contextClassNames.list, classNames6.list),
      listStyle: {
        ...contextStyles.list,
        ...styles.list,
        ...!hasFileList && {
          display: "none"
        }
      },
      itemClassName: (0, import_classnames6.default)(contextClassNames.item, classNames6.item),
      itemStyle: {
        ...contextStyles.item,
        ...styles.item
      },
      imageProps
    }), getPlaceholderNode("inline", hasFileList ? {
      style: {
        display: "none"
      }
    } : {}, uploadRef), import_react17.default.createElement(DropArea, {
      getDropContainer: getDropContainer || (() => containerRef.current),
      prefixCls,
      className: cssinjsCls
    }, getPlaceholderNode("drop")));
  }
  return wrapCSSVar(import_react17.default.createElement(AttachmentContext.Provider, {
    value: {
      disabled
    }
  }, renderChildren));
}
var ForwardAttachments = import_react17.default.forwardRef(Attachments);
if (true) {
  ForwardAttachments.displayName = "Attachments";
}
ForwardAttachments.FileCard = FileListCard_default;
var attachments_default = ForwardAttachments;

// node_modules/@ant-design/x/es/sender/index.js
var import_classnames10 = __toESM(require_classnames());
var import_react22 = __toESM(require_react());

// node_modules/@ant-design/x/es/_util/hooks/use-proxy-imperative-handle.js
var import_react18 = __toESM(require_react());
function useProxyImperativeHandle(ref, init) {
  return (0, import_react18.useImperativeHandle)(ref, () => {
    const refObj = init();
    const {
      nativeElement
    } = refObj;
    return new Proxy(nativeElement, {
      get(obj, prop) {
        if (refObj[prop]) {
          return refObj[prop];
        }
        return Reflect.get(obj, prop);
      }
    });
  });
}

// node_modules/@ant-design/x/es/sender/SenderHeader.js
var import_classnames7 = __toESM(require_classnames());
var React18 = __toESM(require_react());
var SendHeaderContext = React18.createContext({});
var collapseHeight = () => ({
  height: 0
});
var expandedHeight = (ele) => ({
  height: ele.scrollHeight
});
function SenderHeader(props) {
  const {
    title,
    onOpenChange,
    open,
    children,
    className,
    style,
    classNames: classes = {},
    styles = {},
    closable,
    forceRender
  } = props;
  const {
    prefixCls
  } = React18.useContext(SendHeaderContext);
  const headerCls = `${prefixCls}-header`;
  return React18.createElement(es_default, {
    motionEnter: true,
    motionLeave: true,
    motionName: `${headerCls}-motion`,
    leavedClassName: `${headerCls}-motion-hidden`,
    onEnterStart: collapseHeight,
    onEnterActive: expandedHeight,
    onLeaveStart: expandedHeight,
    onLeaveActive: collapseHeight,
    visible: open,
    forceRender
  }, ({
    className: motionClassName,
    style: motionStyle
  }) => {
    return React18.createElement("div", {
      className: (0, import_classnames7.default)(headerCls, motionClassName, className),
      style: {
        ...motionStyle,
        ...style
      }
    }, (closable !== false || title) && React18.createElement("div", {
      className: (
        // We follow antd naming standard here.
        // So the header part is use `-header` suffix.
        // Though its little bit weird for double `-header`.
        (0, import_classnames7.default)(`${headerCls}-header`, classes.header)
      ),
      style: {
        ...styles.header
      }
    }, React18.createElement("div", {
      className: `${headerCls}-title`
    }, title), closable !== false && React18.createElement("div", {
      className: `${headerCls}-close`
    }, React18.createElement(button_default, {
      type: "text",
      icon: React18.createElement(CloseOutlined_default, null),
      size: "small",
      onClick: () => {
        onOpenChange == null ? void 0 : onOpenChange(!open);
      }
    }))), children && React18.createElement("div", {
      className: (0, import_classnames7.default)(`${headerCls}-content`, classes.content),
      style: {
        ...styles.content
      }
    }, children));
  });
}

// node_modules/@ant-design/x/es/sender/components/ActionButton.js
var import_classnames8 = __toESM(require_classnames());
var React19 = __toESM(require_react());
var ActionButtonContext = React19.createContext(null);
function ActionButton(props, ref) {
  const {
    className,
    action,
    onClick,
    ...restProps
  } = props;
  const context = React19.useContext(ActionButtonContext);
  const {
    prefixCls,
    disabled: rootDisabled
  } = context;
  const mergedDisabled = restProps.disabled ?? rootDisabled ?? context[`${action}Disabled`];
  return React19.createElement(button_default, _extends({
    type: "text"
  }, restProps, {
    ref,
    onClick: (e) => {
      var _a;
      if (mergedDisabled) {
        return;
      }
      (_a = context[action]) == null ? void 0 : _a.call(context);
      onClick == null ? void 0 : onClick(e);
    },
    className: (0, import_classnames8.default)(prefixCls, className, {
      [`${prefixCls}-disabled`]: mergedDisabled
    })
  }));
}
var ActionButton_default = React19.forwardRef(ActionButton);

// node_modules/@ant-design/x/es/sender/components/ClearButton.js
var React20 = __toESM(require_react());
function ClearButton(props, ref) {
  return React20.createElement(ActionButton_default, _extends({
    icon: React20.createElement(ClearOutlined_default, null)
  }, props, {
    action: "onClear",
    ref
  }));
}
var ClearButton_default = React20.forwardRef(ClearButton);

// node_modules/@ant-design/x/es/sender/components/LoadingButton.js
var import_classnames9 = __toESM(require_classnames());
var React22 = __toESM(require_react());

// node_modules/@ant-design/x/es/sender/StopLoading.js
var import_react19 = __toESM(require_react());
var StopLoadingIcon = (0, import_react19.memo)((props) => {
  const {
    className
  } = props;
  return import_react19.default.createElement("svg", {
    color: "currentColor",
    viewBox: "0 0 1000 1000",
    xmlns: "http://www.w3.org/2000/svg",
    className
  }, import_react19.default.createElement("title", null, "Stop Loading"), import_react19.default.createElement("rect", {
    fill: "currentColor",
    height: "250",
    rx: "24",
    ry: "24",
    width: "250",
    x: "375",
    y: "375"
  }), import_react19.default.createElement("circle", {
    cx: "500",
    cy: "500",
    fill: "none",
    r: "450",
    stroke: "currentColor",
    strokeWidth: "100",
    opacity: "0.45"
  }), import_react19.default.createElement("circle", {
    cx: "500",
    cy: "500",
    fill: "none",
    r: "450",
    stroke: "currentColor",
    strokeWidth: "100",
    strokeDasharray: "600 9999999"
  }, import_react19.default.createElement("animateTransform", {
    attributeName: "transform",
    dur: "1s",
    from: "0 500 500",
    repeatCount: "indefinite",
    to: "360 500 500",
    type: "rotate"
  })));
});
var StopLoading_default = StopLoadingIcon;

// node_modules/@ant-design/x/es/sender/components/LoadingButton.js
function LoadingButton(props, ref) {
  const {
    prefixCls
  } = React22.useContext(ActionButtonContext);
  const {
    className
  } = props;
  return React22.createElement(ActionButton_default, _extends({
    icon: null,
    color: "primary",
    variant: "text",
    shape: "circle"
  }, props, {
    className: (0, import_classnames9.default)(className, `${prefixCls}-loading-button`),
    action: "onCancel",
    ref
  }), React22.createElement(StopLoading_default, {
    className: `${prefixCls}-loading-icon`
  }));
}
var LoadingButton_default = React22.forwardRef(LoadingButton);

// node_modules/@ant-design/x/es/sender/components/SendButton.js
var React23 = __toESM(require_react());
function SendButton(props, ref) {
  return React23.createElement(ActionButton_default, _extends({
    icon: React23.createElement(ArrowUpOutlined_default, null),
    type: "primary",
    shape: "circle"
  }, props, {
    action: "onSend",
    ref
  }));
}
var SendButton_default = React23.forwardRef(SendButton);

// node_modules/@ant-design/x/es/sender/components/SpeechButton/index.js
var React25 = __toESM(require_react());

// node_modules/@ant-design/x/es/sender/components/SpeechButton/RecordingIcon.js
var import_react20 = __toESM(require_react());
var SIZE = 1e3;
var COUNT = 4;
var RECT_WIDTH = 140;
var RECT_RADIUS = RECT_WIDTH / 2;
var RECT_HEIGHT_MIN = 250;
var RECT_HEIGHT_MAX = 500;
var DURATION = 0.8;
function RecordingIcon({
  className
}) {
  return import_react20.default.createElement("svg", {
    color: "currentColor",
    viewBox: `0 0 ${SIZE} ${SIZE}`,
    xmlns: "http://www.w3.org/2000/svg",
    className
  }, import_react20.default.createElement("title", null, "Speech Recording"), Array.from({
    length: COUNT
  }).map((_, index) => {
    const dest = (SIZE - RECT_WIDTH * COUNT) / (COUNT - 1);
    const x = index * (dest + RECT_WIDTH);
    const yMin = SIZE / 2 - RECT_HEIGHT_MIN / 2;
    const yMax = SIZE / 2 - RECT_HEIGHT_MAX / 2;
    return import_react20.default.createElement("rect", {
      fill: "currentColor",
      rx: RECT_RADIUS,
      ry: RECT_RADIUS,
      height: RECT_HEIGHT_MIN,
      width: RECT_WIDTH,
      x,
      y: yMin,
      key: index
    }, import_react20.default.createElement("animate", {
      attributeName: "height",
      values: `${RECT_HEIGHT_MIN}; ${RECT_HEIGHT_MAX}; ${RECT_HEIGHT_MIN}`,
      keyTimes: "0; 0.5; 1",
      dur: `${DURATION}s`,
      begin: `${DURATION / COUNT * index}s`,
      repeatCount: "indefinite"
    }), import_react20.default.createElement("animate", {
      attributeName: "y",
      values: `${yMin}; ${yMax}; ${yMin}`,
      keyTimes: "0; 0.5; 1",
      dur: `${DURATION}s`,
      begin: `${DURATION / COUNT * index}s`,
      repeatCount: "indefinite"
    }));
  }));
}

// node_modules/@ant-design/x/es/sender/components/SpeechButton/index.js
function SpeechButton(props, ref) {
  const {
    speechRecording,
    onSpeechDisabled,
    prefixCls
  } = React25.useContext(ActionButtonContext);
  let icon = null;
  if (speechRecording) {
    icon = React25.createElement(RecordingIcon, {
      className: `${prefixCls}-recording-icon`
    });
  } else if (onSpeechDisabled) {
    icon = React25.createElement(AudioMutedOutlined_default, null);
  } else {
    icon = React25.createElement(AudioOutlined_default, null);
  }
  return React25.createElement(ActionButton_default, _extends({
    icon,
    color: "primary",
    variant: "text"
  }, props, {
    action: "onSpeech",
    ref
  }));
}
var SpeechButton_default = React25.forwardRef(SpeechButton);

// node_modules/@ant-design/x/es/sender/style/header.js
var genSenderHeaderStyle = (token) => {
  const {
    componentCls,
    calc
  } = token;
  const headerCls = `${componentCls}-header`;
  return {
    [componentCls]: {
      [headerCls]: {
        borderBottomWidth: token.lineWidth,
        borderBottomStyle: "solid",
        borderBottomColor: token.colorBorder,
        // ======================== Header ========================
        "&-header": {
          background: token.colorFillAlter,
          fontSize: token.fontSize,
          lineHeight: token.lineHeight,
          paddingBlock: calc(token.paddingSM).sub(token.lineWidthBold).equal(),
          paddingInlineStart: token.padding,
          paddingInlineEnd: token.paddingXS,
          display: "flex",
          borderRadius: {
            _skip_check_: true,
            value: calc(token.borderRadius).mul(2).equal()
          },
          borderEndStartRadius: 0,
          borderEndEndRadius: 0,
          [`${headerCls}-title`]: {
            flex: "auto"
          }
        },
        // ======================= Content ========================
        "&-content": {
          padding: token.padding
        },
        // ======================== Motion ========================
        "&-motion": {
          transition: ["height", "border"].map((prop) => `${prop} ${token.motionDurationSlow}`).join(","),
          overflow: "hidden",
          "&-enter-start, &-leave-active": {
            borderBottomColor: "transparent"
          },
          "&-hidden": {
            display: "none"
          }
        }
      }
    }
  };
};
var header_default = genSenderHeaderStyle;

// node_modules/@ant-design/x/es/sender/style/index.js
var genSenderStyle = (token) => {
  const {
    componentCls,
    padding,
    paddingSM,
    paddingXS,
    paddingXXS,
    lineWidth,
    lineWidthBold,
    calc
  } = token;
  return {
    [componentCls]: {
      position: "relative",
      width: "100%",
      boxSizing: "border-box",
      boxShadow: `${token.boxShadowTertiary}`,
      transition: `background ${token.motionDurationSlow}`,
      // Border
      borderRadius: {
        _skip_check_: true,
        value: calc(token.borderRadius).mul(2).equal()
      },
      borderColor: token.colorBorder,
      borderWidth: 0,
      borderStyle: "solid",
      // Border
      "&:after": {
        content: '""',
        position: "absolute",
        inset: 0,
        pointerEvents: "none",
        transition: `border-color ${token.motionDurationSlow}`,
        borderRadius: {
          _skip_check_: true,
          value: "inherit"
        },
        borderStyle: "inherit",
        borderColor: "inherit",
        borderWidth: lineWidth
      },
      // Focus
      "&:focus-within": {
        boxShadow: `${token.boxShadowSecondary}`,
        borderColor: token.colorPrimary,
        "&:after": {
          borderWidth: lineWidthBold
        }
      },
      "&-disabled": {
        background: token.colorBgContainerDisabled
      },
      // ============================== RTL ==============================
      [`&${componentCls}-rtl`]: {
        direction: "rtl"
      },
      // ============================ Content ============================
      [`${componentCls}-content`]: {
        display: "flex",
        gap: paddingXS,
        width: "100%",
        paddingBlock: paddingSM,
        paddingInlineStart: padding,
        paddingInlineEnd: paddingSM,
        boxSizing: "border-box",
        alignItems: "flex-end"
      },
      // ============================ Prefix =============================
      [`${componentCls}-prefix`]: {
        flex: "none"
      },
      // ============================= Input =============================
      [`${componentCls}-input`]: {
        padding: 0,
        borderRadius: 0,
        flex: "auto",
        alignSelf: "center",
        minHeight: "auto"
      },
      // ============================ Actions ============================
      [`${componentCls}-actions-list`]: {
        flex: "none",
        display: "flex",
        "&-presets": {
          gap: token.paddingXS
        }
      },
      [`${componentCls}-actions-btn`]: {
        "&-disabled": {
          opacity: 0.45
        },
        "&-loading-button": {
          padding: 0,
          border: 0
        },
        "&-loading-icon": {
          height: token.controlHeight,
          width: token.controlHeight,
          verticalAlign: "top"
        },
        "&-recording-icon": {
          height: "1.2em",
          width: "1.2em",
          verticalAlign: "top"
        }
      },
      // ============================ Footer =============================
      [`${componentCls}-footer`]: {
        paddingInlineStart: padding,
        paddingInlineEnd: paddingSM,
        paddingBlockEnd: paddingSM,
        paddingBlockStart: paddingXXS,
        boxSizing: "border-box"
      }
    }
  };
};
var prepareComponentToken3 = () => ({});
var style_default3 = genStyleHooks("Sender", (token) => {
  const {
    paddingXS,
    calc
  } = token;
  const SenderToken = merge(token, {
    SenderContentMaxWidth: `calc(100% - ${unit(calc(paddingXS).add(32).equal())})`
  });
  return [genSenderStyle(SenderToken), header_default(SenderToken)];
}, prepareComponentToken3);

// node_modules/@ant-design/x/es/sender/useSpeech.js
var import_react21 = __toESM(require_react());
var SpeechRecognition;
if (!SpeechRecognition && typeof window !== "undefined") {
  SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
}
function useSpeech(onSpeech, allowSpeech) {
  const onEventSpeech = useEvent(onSpeech);
  const [controlledRecording, onControlledRecordingChange, speechInControlled] = import_react21.default.useMemo(() => {
    if (typeof allowSpeech === "object") {
      return [allowSpeech.recording, allowSpeech.onRecordingChange, typeof allowSpeech.recording === "boolean"];
    }
    return [void 0, void 0, false];
  }, [allowSpeech]);
  const [permissionState, setPermissionState] = import_react21.default.useState(null);
  import_react21.default.useEffect(() => {
    if (typeof navigator !== "undefined" && "permissions" in navigator) {
      let lastPermission = null;
      navigator.permissions.query({
        name: "microphone"
      }).then((permissionStatus) => {
        setPermissionState(permissionStatus.state);
        permissionStatus.onchange = function() {
          setPermissionState(this.state);
        };
        lastPermission = permissionStatus;
      });
      return () => {
        if (lastPermission) {
          lastPermission.onchange = null;
        }
      };
    }
  }, []);
  const mergedAllowSpeech = SpeechRecognition && permissionState !== "denied";
  const recognitionRef = import_react21.default.useRef(null);
  const [recording, setRecording] = useMergedState(false, {
    value: controlledRecording
  });
  const forceBreakRef = import_react21.default.useRef(false);
  const ensureRecognition = () => {
    if (mergedAllowSpeech && !recognitionRef.current) {
      const recognition = new SpeechRecognition();
      recognition.onstart = () => {
        setRecording(true);
      };
      recognition.onend = () => {
        setRecording(false);
      };
      recognition.onresult = (event) => {
        var _a, _b, _c;
        if (!forceBreakRef.current) {
          const transcript = (_c = (_b = (_a = event.results) == null ? void 0 : _a[0]) == null ? void 0 : _b[0]) == null ? void 0 : _c.transcript;
          onEventSpeech(transcript);
        }
        forceBreakRef.current = false;
      };
      recognitionRef.current = recognition;
    }
  };
  const triggerSpeech = useEvent((forceBreak) => {
    if (forceBreak && !recording) {
      return;
    }
    forceBreakRef.current = forceBreak;
    if (speechInControlled) {
      onControlledRecordingChange == null ? void 0 : onControlledRecordingChange(!recording);
    } else {
      ensureRecognition();
      if (recognitionRef.current) {
        if (recording) {
          recognitionRef.current.stop();
          onControlledRecordingChange == null ? void 0 : onControlledRecordingChange(false);
        } else {
          recognitionRef.current.start();
          onControlledRecordingChange == null ? void 0 : onControlledRecordingChange(true);
        }
      }
    }
  });
  return [mergedAllowSpeech, triggerSpeech, recording];
}

// node_modules/@ant-design/x/es/sender/index.js
function getComponent(components, path, defaultComponent) {
  return get(components, path) || defaultComponent;
}
var sharedRenderComponents = {
  SendButton: SendButton_default,
  ClearButton: ClearButton_default,
  LoadingButton: LoadingButton_default,
  SpeechButton: SpeechButton_default
};
var ForwardSender = import_react22.default.forwardRef((props, ref) => {
  const {
    prefixCls: customizePrefixCls,
    styles = {},
    classNames: classNames6 = {},
    className,
    rootClassName,
    style,
    defaultValue,
    value,
    readOnly,
    submitType = "enter",
    onSubmit,
    loading,
    components,
    onCancel,
    onChange,
    actions,
    onKeyPress,
    onKeyDown,
    disabled,
    allowSpeech,
    prefix,
    footer,
    header,
    onPaste,
    onPasteFile,
    autoSize = {
      maxRows: 8
    },
    ...rest
  } = props;
  const {
    direction,
    getPrefixCls
  } = use_x_provider_context_default();
  const prefixCls = getPrefixCls("sender", customizePrefixCls);
  const containerRef = import_react22.default.useRef(null);
  const inputRef = import_react22.default.useRef(null);
  useProxyImperativeHandle(ref, () => {
    var _a, _b;
    return {
      nativeElement: containerRef.current,
      focus: (_a = inputRef.current) == null ? void 0 : _a.focus,
      blur: (_b = inputRef.current) == null ? void 0 : _b.blur
    };
  });
  const contextConfig = use_x_component_config_default("sender");
  const inputCls = `${prefixCls}-input`;
  const [wrapCSSVar, hashId, cssVarCls] = style_default3(prefixCls);
  const mergedCls = (0, import_classnames10.default)(prefixCls, contextConfig.className, className, rootClassName, hashId, cssVarCls, {
    [`${prefixCls}-rtl`]: direction === "rtl",
    [`${prefixCls}-disabled`]: disabled
  });
  const actionBtnCls = `${prefixCls}-actions-btn`;
  const actionListCls = `${prefixCls}-actions-list`;
  const [innerValue, setInnerValue] = useMergedState(defaultValue || "", {
    value
  });
  const triggerValueChange = (nextValue, event) => {
    setInnerValue(nextValue);
    if (onChange) {
      onChange(nextValue, event);
    }
  };
  const [speechPermission, triggerSpeech, speechRecording] = useSpeech((transcript) => {
    triggerValueChange(`${innerValue} ${transcript}`);
  }, allowSpeech);
  const InputTextArea = getComponent(components, ["input"], input_default.TextArea);
  const domProps = pickAttrs(rest, {
    attr: true,
    aria: true,
    data: true
  });
  const inputProps = {
    ...domProps,
    ref: inputRef
  };
  const triggerSend = () => {
    if (innerValue && onSubmit && !loading) {
      onSubmit(innerValue);
    }
  };
  const triggerClear = () => {
    triggerValueChange("");
  };
  const isCompositionRef = import_react22.default.useRef(false);
  const onInternalCompositionStart = () => {
    isCompositionRef.current = true;
  };
  const onInternalCompositionEnd = () => {
    isCompositionRef.current = false;
  };
  const onInternalKeyPress = (e) => {
    const canSubmit = e.key === "Enter" && !isCompositionRef.current;
    switch (submitType) {
      case "enter":
        if (canSubmit && !e.shiftKey) {
          e.preventDefault();
          triggerSend();
        }
        break;
      case "shiftEnter":
        if (canSubmit && e.shiftKey) {
          e.preventDefault();
          triggerSend();
        }
        break;
    }
    onKeyPress == null ? void 0 : onKeyPress(e);
  };
  const onInternalPaste = (e) => {
    var _a;
    const files = (_a = e.clipboardData) == null ? void 0 : _a.files;
    if ((files == null ? void 0 : files.length) && onPasteFile) {
      onPasteFile(files[0], files);
      e.preventDefault();
    }
    onPaste == null ? void 0 : onPaste(e);
  };
  const onContentMouseDown = (e) => {
    var _a, _b;
    if (e.target !== ((_a = containerRef.current) == null ? void 0 : _a.querySelector(`.${inputCls}`))) {
      e.preventDefault();
    }
    (_b = inputRef.current) == null ? void 0 : _b.focus();
  };
  let actionNode = import_react22.default.createElement(flex_default, {
    className: `${actionListCls}-presets`
  }, allowSpeech && import_react22.default.createElement(SpeechButton_default, null), loading ? import_react22.default.createElement(LoadingButton_default, null) : import_react22.default.createElement(SendButton_default, null));
  if (typeof actions === "function") {
    actionNode = actions(actionNode, {
      components: sharedRenderComponents
    });
  } else if (actions || actions === false) {
    actionNode = actions;
  }
  const actionsButtonContextProps = {
    prefixCls: actionBtnCls,
    onSend: triggerSend,
    onSendDisabled: !innerValue,
    onClear: triggerClear,
    onClearDisabled: !innerValue,
    onCancel,
    onCancelDisabled: !loading,
    onSpeech: () => triggerSpeech(false),
    onSpeechDisabled: !speechPermission,
    speechRecording,
    disabled
  };
  const footerNode = typeof footer === "function" ? footer({
    components: sharedRenderComponents
  }) : footer || null;
  return wrapCSSVar(import_react22.default.createElement("div", {
    ref: containerRef,
    className: mergedCls,
    style: {
      ...contextConfig.style,
      ...style
    }
  }, header && import_react22.default.createElement(SendHeaderContext.Provider, {
    value: {
      prefixCls
    }
  }, header), import_react22.default.createElement(ActionButtonContext.Provider, {
    value: actionsButtonContextProps
  }, import_react22.default.createElement("div", {
    className: `${prefixCls}-content`,
    onMouseDown: onContentMouseDown
  }, prefix && import_react22.default.createElement("div", {
    className: (0, import_classnames10.default)(`${prefixCls}-prefix`, contextConfig.classNames.prefix, classNames6.prefix),
    style: {
      ...contextConfig.styles.prefix,
      ...styles.prefix
    }
  }, prefix), import_react22.default.createElement(InputTextArea, _extends({}, inputProps, {
    disabled,
    style: {
      ...contextConfig.styles.input,
      ...styles.input
    },
    className: (0, import_classnames10.default)(inputCls, contextConfig.classNames.input, classNames6.input),
    autoSize,
    value: innerValue,
    onChange: (event) => {
      triggerValueChange(event.target.value, event);
      triggerSpeech(true);
    },
    onPressEnter: onInternalKeyPress,
    onCompositionStart: onInternalCompositionStart,
    onCompositionEnd: onInternalCompositionEnd,
    onKeyDown,
    onPaste: onInternalPaste,
    variant: "borderless",
    readOnly
  })), actionNode && import_react22.default.createElement("div", {
    className: (0, import_classnames10.default)(actionListCls, contextConfig.classNames.actions, classNames6.actions),
    style: {
      ...contextConfig.styles.actions,
      ...styles.actions
    }
  }, actionNode)), footerNode && import_react22.default.createElement("div", {
    className: (0, import_classnames10.default)(`${prefixCls}-footer`, contextConfig.classNames.footer, classNames6.footer),
    style: {
      ...contextConfig.styles.footer,
      ...styles.footer
    }
  }, footerNode))));
});
var Sender = ForwardSender;
if (true) {
  Sender.displayName = "Sender";
}
Sender.Header = SenderHeader;
var sender_default = Sender;

// node_modules/@ant-design/x/es/bubble/Bubble.js
var import_classnames11 = __toESM(require_classnames());
var import_react24 = __toESM(require_react());

// node_modules/@ant-design/x/es/bubble/hooks/useTypedEffect.js
var React28 = __toESM(require_react());
function isString(str) {
  return typeof str === "string";
}
var useTypedEffect = (content, typingEnabled, typingStep, typingInterval) => {
  const prevContentRef = React28.useRef("");
  const [typingIndex, setTypingIndex] = React28.useState(1);
  const mergedTypingEnabled = typingEnabled && isString(content);
  useLayoutEffect_default(() => {
    if (!mergedTypingEnabled && isString(content)) {
      setTypingIndex(content.length);
    } else if (isString(content) && isString(prevContentRef.current) && content.indexOf(prevContentRef.current) !== 0) {
      setTypingIndex(1);
    }
    prevContentRef.current = content;
  }, [content]);
  React28.useEffect(() => {
    if (mergedTypingEnabled && typingIndex < content.length) {
      const id = setTimeout(() => {
        setTypingIndex((prev) => prev + typingStep);
      }, typingInterval);
      return () => {
        clearTimeout(id);
      };
    }
  }, [typingIndex, typingEnabled, content]);
  const mergedTypingContent = mergedTypingEnabled ? content.slice(0, typingIndex) : content;
  return [mergedTypingContent, mergedTypingEnabled && typingIndex < content.length];
};
var useTypedEffect_default = useTypedEffect;

// node_modules/@ant-design/x/es/bubble/hooks/useTypingConfig.js
var React29 = __toESM(require_react());
function useTypingConfig(typing) {
  return React29.useMemo(() => {
    if (!typing) {
      return [false, 0, 0, null];
    }
    let baseConfig = {
      step: 1,
      interval: 50,
      // set default suffix is empty
      suffix: null
    };
    if (typeof typing === "object") {
      baseConfig = {
        ...baseConfig,
        ...typing
      };
    }
    return [true, baseConfig.step, baseConfig.interval, baseConfig.suffix];
  }, [typing]);
}
var useTypingConfig_default = useTypingConfig;

// node_modules/@ant-design/x/es/bubble/loading.js
var import_react23 = __toESM(require_react());
var Loading = ({
  prefixCls
}) => import_react23.default.createElement("span", {
  className: `${prefixCls}-dot`
}, import_react23.default.createElement("i", {
  className: `${prefixCls}-dot-item`,
  key: `item-${1}`
}), import_react23.default.createElement("i", {
  className: `${prefixCls}-dot-item`,
  key: `item-${2}`
}), import_react23.default.createElement("i", {
  className: `${prefixCls}-dot-item`,
  key: `item-${3}`
}));
var loading_default = Loading;

// node_modules/@ant-design/x/es/bubble/style/content.js
var genVariantStyle = (token) => {
  const {
    componentCls,
    paddingSM,
    padding
  } = token;
  return {
    [componentCls]: {
      [`${componentCls}-content`]: {
        // Shared: filled, outlined, shadow
        "&-filled,&-outlined,&-shadow": {
          padding: `${unit(paddingSM)} ${unit(padding)}`,
          borderRadius: token.borderRadiusLG
        },
        // Filled:
        "&-filled": {
          backgroundColor: token.colorFillContent
        },
        // Outlined:
        "&-outlined": {
          border: `1px solid ${token.colorBorderSecondary}`
        },
        // Shadow:
        "&-shadow": {
          boxShadow: token.boxShadowTertiary
        }
      }
    }
  };
};
var genShapeStyle = (token) => {
  const {
    componentCls,
    fontSize,
    lineHeight,
    paddingSM,
    padding,
    calc
  } = token;
  const halfRadius = calc(fontSize).mul(lineHeight).div(2).add(paddingSM).equal();
  const contentCls = `${componentCls}-content`;
  return {
    [componentCls]: {
      [contentCls]: {
        // round:
        "&-round": {
          borderRadius: {
            _skip_check_: true,
            value: halfRadius
          },
          paddingInline: calc(padding).mul(1.25).equal()
        }
      },
      // corner:
      [`&-start ${contentCls}-corner`]: {
        borderStartStartRadius: token.borderRadiusXS
      },
      [`&-end ${contentCls}-corner`]: {
        borderStartEndRadius: token.borderRadiusXS
      }
    }
  };
};

// node_modules/@ant-design/x/es/bubble/style/list.js
var genBubbleListStyle = (token) => {
  const {
    componentCls,
    padding
  } = token;
  return {
    [`${componentCls}-list`]: {
      display: "flex",
      flexDirection: "column",
      gap: padding,
      overflowY: "auto",
      "&::-webkit-scrollbar": {
        width: 8,
        backgroundColor: "transparent"
      },
      "&::-webkit-scrollbar-thumb": {
        backgroundColor: token.colorTextTertiary,
        borderRadius: token.borderRadiusSM
      },
      // For Firefox
      "&": {
        scrollbarWidth: "thin",
        scrollbarColor: `${token.colorTextTertiary} transparent`
      }
    }
  };
};
var list_default = genBubbleListStyle;

// node_modules/@ant-design/x/es/bubble/style/index.js
var loadingMove = new Keyframes_default("loadingMove", {
  "0%": {
    transform: "translateY(0)"
  },
  "10%": {
    transform: "translateY(4px)"
  },
  "20%": {
    transform: "translateY(0)"
  },
  "30%": {
    transform: "translateY(-4px)"
  },
  "40%": {
    transform: "translateY(0)"
  }
});
var cursorBlink = new Keyframes_default("cursorBlink", {
  "0%": {
    opacity: 1
  },
  "50%": {
    opacity: 0
  },
  "100%": {
    opacity: 1
  }
});
var genBubbleStyle = (token) => {
  const {
    componentCls,
    fontSize,
    lineHeight,
    paddingSM,
    colorText,
    calc
  } = token;
  return {
    [componentCls]: {
      display: "flex",
      columnGap: paddingSM,
      [`&${componentCls}-end`]: {
        justifyContent: "end",
        flexDirection: "row-reverse",
        [`& ${componentCls}-content-wrapper`]: {
          alignItems: "flex-end"
        }
      },
      [`&${componentCls}-rtl`]: {
        direction: "rtl"
      },
      [`&${componentCls}-typing ${componentCls}-content:last-child::after`]: {
        content: '"|"',
        fontWeight: 900,
        userSelect: "none",
        opacity: 1,
        marginInlineStart: "0.1em",
        animationName: cursorBlink,
        animationDuration: "0.8s",
        animationIterationCount: "infinite",
        animationTimingFunction: "linear"
      },
      // ============================ Avatar =============================
      [`& ${componentCls}-avatar`]: {
        display: "inline-flex",
        justifyContent: "center",
        alignSelf: "flex-start"
      },
      // ======================== Header & Footer ========================
      [`& ${componentCls}-header, & ${componentCls}-footer`]: {
        fontSize,
        lineHeight,
        color: token.colorText
      },
      [`& ${componentCls}-header`]: {
        marginBottom: token.paddingXXS
      },
      [`& ${componentCls}-footer`]: {
        marginTop: paddingSM
      },
      // =========================== Content =============================
      [`& ${componentCls}-content-wrapper`]: {
        flex: "auto",
        display: "flex",
        flexDirection: "column",
        alignItems: "flex-start",
        minWidth: 0,
        maxWidth: "100%"
      },
      [`& ${componentCls}-content`]: {
        position: "relative",
        boxSizing: "border-box",
        minWidth: 0,
        maxWidth: "100%",
        color: colorText,
        fontSize: token.fontSize,
        lineHeight: token.lineHeight,
        minHeight: calc(paddingSM).mul(2).add(calc(lineHeight).mul(fontSize)).equal(),
        wordBreak: "break-word",
        [`& ${componentCls}-dot`]: {
          position: "relative",
          height: "100%",
          display: "flex",
          alignItems: "center",
          columnGap: token.marginXS,
          padding: `0 ${unit(token.paddingXXS)}`,
          "&-item": {
            backgroundColor: token.colorPrimary,
            borderRadius: "100%",
            width: 4,
            height: 4,
            animationName: loadingMove,
            animationDuration: "2s",
            animationIterationCount: "infinite",
            animationTimingFunction: "linear",
            "&:nth-child(1)": {
              animationDelay: "0s"
            },
            "&:nth-child(2)": {
              animationDelay: "0.2s"
            },
            "&:nth-child(3)": {
              animationDelay: "0.4s"
            }
          }
        }
      }
    }
  };
};
var prepareComponentToken4 = () => ({});
var style_default4 = genStyleHooks("Bubble", (token) => {
  const bubbleToken = merge(token, {});
  return [genBubbleStyle(bubbleToken), list_default(bubbleToken), genVariantStyle(bubbleToken), genShapeStyle(bubbleToken)];
}, prepareComponentToken4);

// node_modules/@ant-design/x/es/bubble/Bubble.js
var BubbleContext = import_react24.default.createContext({});
var Bubble = (props, ref) => {
  const {
    prefixCls: customizePrefixCls,
    className,
    rootClassName,
    style,
    classNames: classNames6 = {},
    styles = {},
    avatar,
    placement = "start",
    loading = false,
    loadingRender,
    typing,
    content = "",
    messageRender,
    variant = "filled",
    shape,
    onTypingComplete,
    header,
    footer,
    _key,
    ...otherHtmlProps
  } = props;
  const {
    onUpdate
  } = import_react24.default.useContext(BubbleContext);
  const divRef = import_react24.default.useRef(null);
  import_react24.default.useImperativeHandle(ref, () => ({
    nativeElement: divRef.current
  }));
  const {
    direction,
    getPrefixCls
  } = use_x_provider_context_default();
  const prefixCls = getPrefixCls("bubble", customizePrefixCls);
  const contextConfig = use_x_component_config_default("bubble");
  const [typingEnabled, typingStep, typingInterval, customSuffix] = useTypingConfig_default(typing);
  const [typedContent, isTyping] = useTypedEffect_default(content, typingEnabled, typingStep, typingInterval);
  import_react24.default.useEffect(() => {
    onUpdate == null ? void 0 : onUpdate();
  }, [typedContent]);
  const triggerTypingCompleteRef = import_react24.default.useRef(false);
  import_react24.default.useEffect(() => {
    if (!isTyping && !loading) {
      if (!triggerTypingCompleteRef.current) {
        triggerTypingCompleteRef.current = true;
        onTypingComplete == null ? void 0 : onTypingComplete();
      }
    } else {
      triggerTypingCompleteRef.current = false;
    }
  }, [isTyping, loading]);
  const [wrapCSSVar, hashId, cssVarCls] = style_default4(prefixCls);
  const mergedCls = (0, import_classnames11.default)(prefixCls, rootClassName, contextConfig.className, className, hashId, cssVarCls, `${prefixCls}-${placement}`, {
    [`${prefixCls}-rtl`]: direction === "rtl",
    [`${prefixCls}-typing`]: isTyping && !loading && !messageRender && !customSuffix
  });
  const avatarNode = import_react24.default.useMemo(() => import_react24.default.isValidElement(avatar) ? avatar : import_react24.default.createElement(avatar_default, avatar), [avatar]);
  const mergedContent = import_react24.default.useMemo(() => messageRender ? messageRender(typedContent) : typedContent, [typedContent, messageRender]);
  const renderSlot = (node) => typeof node === "function" ? node(typedContent, {
    key: _key
  }) : node;
  let contentNode;
  if (loading) {
    contentNode = loadingRender ? loadingRender() : import_react24.default.createElement(loading_default, {
      prefixCls
    });
  } else {
    contentNode = import_react24.default.createElement(import_react24.default.Fragment, null, mergedContent, isTyping && customSuffix);
  }
  let fullContent = import_react24.default.createElement("div", {
    style: {
      ...contextConfig.styles.content,
      ...styles.content
    },
    className: (0, import_classnames11.default)(`${prefixCls}-content`, `${prefixCls}-content-${variant}`, shape && `${prefixCls}-content-${shape}`, contextConfig.classNames.content, classNames6.content)
  }, contentNode);
  if (header || footer) {
    fullContent = import_react24.default.createElement("div", {
      className: `${prefixCls}-content-wrapper`
    }, header && import_react24.default.createElement("div", {
      className: (0, import_classnames11.default)(`${prefixCls}-header`, contextConfig.classNames.header, classNames6.header),
      style: {
        ...contextConfig.styles.header,
        ...styles.header
      }
    }, renderSlot(header)), fullContent, footer && import_react24.default.createElement("div", {
      className: (0, import_classnames11.default)(`${prefixCls}-footer`, contextConfig.classNames.footer, classNames6.footer),
      style: {
        ...contextConfig.styles.footer,
        ...styles.footer
      }
    }, renderSlot(footer)));
  }
  return wrapCSSVar(import_react24.default.createElement("div", _extends({
    style: {
      ...contextConfig.style,
      ...style
    },
    className: mergedCls
  }, otherHtmlProps, {
    ref: divRef
  }), avatar && import_react24.default.createElement("div", {
    style: {
      ...contextConfig.styles.avatar,
      ...styles.avatar
    },
    className: (0, import_classnames11.default)(`${prefixCls}-avatar`, contextConfig.classNames.avatar, classNames6.avatar)
  }, avatarNode), fullContent));
};
var ForwardBubble = import_react24.default.forwardRef(Bubble);
if (true) {
  ForwardBubble.displayName = "Bubble";
}
var Bubble_default = ForwardBubble;

// node_modules/@ant-design/x/es/bubble/BubbleList.js
var import_classnames12 = __toESM(require_classnames());
var React33 = __toESM(require_react());

// node_modules/@ant-design/x/es/bubble/hooks/useListData.js
var React32 = __toESM(require_react());
function useListData(items, roles) {
  const getRoleBubbleProps = React32.useCallback((bubble, index) => {
    if (typeof roles === "function") {
      return roles(bubble, index);
    }
    if (roles) {
      return roles[bubble.role] || {};
    }
    return {};
  }, [roles]);
  return React32.useMemo(() => (items || []).map((bubbleData, i) => {
    const mergedKey = bubbleData.key ?? `preset_${i}`;
    return {
      ...getRoleBubbleProps(bubbleData, i),
      ...bubbleData,
      key: mergedKey
    };
  }), [items, getRoleBubbleProps]);
}

// node_modules/@ant-design/x/es/bubble/BubbleList.js
var BubbleListItem = ({
  _key,
  ...restProps
}, ref) => React33.createElement(Bubble_default, _extends({}, restProps, {
  _key,
  ref: (node) => {
    var _a;
    if (node) {
      ref.current[_key] = node;
    } else {
      (_a = ref.current) == null ? true : delete _a[_key];
    }
  }
}));
var MemoBubbleListItem = React33.memo(React33.forwardRef(BubbleListItem));
var TOLERANCE2 = 1;
var BubbleList = (props, ref) => {
  const {
    prefixCls: customizePrefixCls,
    rootClassName,
    className,
    items,
    autoScroll = true,
    roles,
    ...restProps
  } = props;
  const domProps = pickAttrs(restProps, {
    attr: true,
    aria: true
  });
  const listRef = React33.useRef(null);
  const bubbleRefs = React33.useRef({});
  const {
    getPrefixCls
  } = use_x_provider_context_default();
  const prefixCls = getPrefixCls("bubble", customizePrefixCls);
  const listPrefixCls = `${prefixCls}-list`;
  const [wrapCSSVar, hashId, cssVarCls] = style_default4(prefixCls);
  const [initialized, setInitialized] = React33.useState(false);
  React33.useEffect(() => {
    setInitialized(true);
    return () => {
      setInitialized(false);
    };
  }, []);
  const mergedData = useListData(items, roles);
  const [scrollReachEnd, setScrollReachEnd] = React33.useState(true);
  const [updateCount, setUpdateCount] = React33.useState(0);
  const onInternalScroll = (e) => {
    const target = e.target;
    setScrollReachEnd(target.scrollHeight - Math.abs(target.scrollTop) - target.clientHeight <= TOLERANCE2);
  };
  React33.useEffect(() => {
    if (autoScroll && listRef.current && scrollReachEnd) {
      listRef.current.scrollTo({
        top: listRef.current.scrollHeight
      });
    }
  }, [updateCount]);
  React33.useEffect(() => {
    var _a;
    if (autoScroll) {
      const lastItemKey = (_a = mergedData[mergedData.length - 2]) == null ? void 0 : _a.key;
      const bubbleInst = bubbleRefs.current[lastItemKey];
      if (bubbleInst) {
        const {
          nativeElement
        } = bubbleInst;
        const {
          top,
          bottom
        } = nativeElement.getBoundingClientRect();
        const {
          top: listTop,
          bottom: listBottom
        } = listRef.current.getBoundingClientRect();
        const isVisible = top < listBottom && bottom > listTop;
        if (isVisible) {
          setUpdateCount((c) => c + 1);
          setScrollReachEnd(true);
        }
      }
    }
  }, [mergedData.length]);
  React33.useImperativeHandle(ref, () => ({
    nativeElement: listRef.current,
    scrollTo: ({
      key,
      offset,
      behavior = "smooth",
      block
    }) => {
      if (typeof offset === "number") {
        listRef.current.scrollTo({
          top: offset,
          behavior
        });
      } else if (key !== void 0) {
        const bubbleInst = bubbleRefs.current[key];
        if (bubbleInst) {
          const index = mergedData.findIndex((dataItem) => dataItem.key === key);
          setScrollReachEnd(index === mergedData.length - 1);
          bubbleInst.nativeElement.scrollIntoView({
            behavior,
            block
          });
        }
      }
    }
  }));
  const onBubbleUpdate = useEvent(() => {
    if (autoScroll) {
      setUpdateCount((c) => c + 1);
    }
  });
  const context = React33.useMemo(() => ({
    onUpdate: onBubbleUpdate
  }), []);
  return wrapCSSVar(React33.createElement(BubbleContext.Provider, {
    value: context
  }, React33.createElement("div", _extends({}, domProps, {
    className: (0, import_classnames12.default)(listPrefixCls, rootClassName, className, hashId, cssVarCls, {
      [`${listPrefixCls}-reach-end`]: scrollReachEnd
    }),
    ref: listRef,
    onScroll: onInternalScroll
  }), mergedData.map(({
    key,
    ...bubble
  }) => React33.createElement(MemoBubbleListItem, _extends({}, bubble, {
    key,
    _key: key,
    ref: bubbleRefs,
    typing: initialized ? bubble.typing : false
  }))))));
};
var ForwardBubbleList = React33.forwardRef(BubbleList);
if (true) {
  ForwardBubbleList.displayName = "BubbleList";
}
var BubbleList_default = ForwardBubbleList;

// node_modules/@ant-design/x/es/bubble/index.js
Bubble_default.List = BubbleList_default;
var bubble_default = Bubble_default;

// node_modules/@ant-design/x/es/conversations/index.js
var import_classnames15 = __toESM(require_classnames());
var import_react28 = __toESM(require_react());

// node_modules/@ant-design/x/es/conversations/GroupTitle.js
var import_classnames13 = __toESM(require_classnames());
var import_react25 = __toESM(require_react());
var GroupTitleContext = import_react25.default.createContext(null);
var GroupTitle = ({
  children
}) => {
  const {
    prefixCls
  } = import_react25.default.useContext(GroupTitleContext);
  return import_react25.default.createElement("div", {
    className: (0, import_classnames13.default)(`${prefixCls}-group-title`)
  }, children && import_react25.default.createElement(typography_default.Text, null, children));
};
var GroupTitle_default = GroupTitle;

// node_modules/@ant-design/x/es/conversations/Item.js
var import_classnames14 = __toESM(require_classnames());
var import_react26 = __toESM(require_react());
var stopPropagation = (e) => {
  e.stopPropagation();
};
var ConversationsItem = (props) => {
  const {
    prefixCls,
    info,
    className,
    direction,
    onClick,
    active,
    menu,
    ...restProps
  } = props;
  const domProps = pickAttrs(restProps, {
    aria: true,
    data: true,
    attr: true
  });
  const {
    disabled
  } = info;
  const mergedCls = (0, import_classnames14.default)(className, `${prefixCls}-item`, {
    [`${prefixCls}-item-active`]: active && !disabled
  }, {
    [`${prefixCls}-item-disabled`]: disabled
  });
  const onInternalClick = () => {
    if (!disabled && onClick) {
      onClick(info);
    }
  };
  const {
    trigger,
    ...dropdownMenu
  } = menu || {};
  const getPopupContainer = dropdownMenu == null ? void 0 : dropdownMenu.getPopupContainer;
  const renderMenuTrigger = (conversation) => {
    const originTriggerNode = import_react26.default.createElement(EllipsisOutlined_default, {
      onClick: stopPropagation,
      className: `${prefixCls}-menu-icon`
    });
    if (trigger) {
      return typeof trigger === "function" ? trigger(conversation, {
        originNode: originTriggerNode
      }) : trigger;
    }
    return originTriggerNode;
  };
  return import_react26.default.createElement("li", _extends({}, domProps, {
    className: mergedCls,
    onClick: onInternalClick,
    title: `${info.label}`
  }), info.icon && import_react26.default.createElement("div", {
    className: `${prefixCls}-icon`
  }, info.icon), import_react26.default.createElement(typography_default.Text, {
    className: `${prefixCls}-label`
  }, info.label), !disabled && menu && import_react26.default.createElement(dropdown_default, {
    menu: dropdownMenu,
    placement: direction === "rtl" ? "bottomLeft" : "bottomRight",
    trigger: ["click"],
    disabled,
    getPopupContainer
  }, renderMenuTrigger(info)));
};
var Item_default = ConversationsItem;

// node_modules/@ant-design/x/es/conversations/hooks/useGroupable.js
var import_react27 = __toESM(require_react());
var __UNGROUPED = "__ungrouped";
var useGroupable = (groupable, items = []) => {
  const [enableGroup, sort, title] = import_react27.default.useMemo(() => {
    if (!groupable) {
      return [false, void 0, void 0];
    }
    let baseConfig = {
      sort: void 0,
      title: void 0
    };
    if (typeof groupable === "object") {
      baseConfig = {
        ...baseConfig,
        ...groupable
      };
    }
    return [true, baseConfig.sort, baseConfig.title];
  }, [groupable]);
  return import_react27.default.useMemo(() => {
    if (!enableGroup) {
      const groupList2 = [{
        name: __UNGROUPED,
        data: items,
        title: void 0
      }];
      return [groupList2, enableGroup];
    }
    const groupMap = items.reduce((acc, item) => {
      const group = item.group || __UNGROUPED;
      if (!acc[group]) {
        acc[group] = [];
      }
      acc[group].push(item);
      return acc;
    }, {});
    const groupKeys = sort ? Object.keys(groupMap).sort(sort) : Object.keys(groupMap);
    const groupList = groupKeys.map((group) => ({
      name: group === __UNGROUPED ? void 0 : group,
      title,
      data: groupMap[group]
    }));
    return [groupList, enableGroup];
  }, [items, groupable]);
};
var useGroupable_default = useGroupable;

// node_modules/@ant-design/x/es/conversations/style/index.js
var genConversationsStyle = (token) => {
  const {
    componentCls
  } = token;
  return {
    [componentCls]: {
      display: "flex",
      flexDirection: "column",
      gap: token.paddingXXS,
      overflowY: "auto",
      padding: token.paddingSM,
      margin: 0,
      listStyle: "none",
      "ul, ol": {
        margin: 0,
        padding: 0,
        listStyle: "none"
      },
      [`&${componentCls}-rtl`]: {
        direction: "rtl"
      },
      // 会话列表
      [`& ${componentCls}-list`]: {
        display: "flex",
        gap: token.paddingXXS,
        flexDirection: "column",
        [`& ${componentCls}-item`]: {
          paddingInlineStart: token.paddingXL
        },
        [`& ${componentCls}-label`]: {
          color: token.colorTextDescription,
          overflow: "hidden",
          textOverflow: "ellipsis",
          whiteSpace: "nowrap"
        }
      },
      // 会话列表项
      [`& ${componentCls}-item`]: {
        display: "flex",
        height: token.controlHeightLG,
        minHeight: token.controlHeightLG,
        gap: token.paddingXS,
        padding: `0 ${unit(token.paddingXS)}`,
        alignItems: "center",
        borderRadius: token.borderRadiusLG,
        cursor: "pointer",
        transition: `all ${token.motionDurationMid} ${token.motionEaseInOut}`,
        // 悬浮样式
        "&:hover": {
          backgroundColor: token.colorBgTextHover
        },
        // 选中样式
        "&-active": {
          backgroundColor: token.colorBgTextHover,
          [`& ${componentCls}-label, ${componentCls}-menu-icon`]: {
            color: token.colorText
          }
        },
        // 禁用样式
        "&-disabled": {
          cursor: "not-allowed",
          [`& ${componentCls}-label`]: {
            color: token.colorTextDisabled
          }
        },
        // 悬浮、选中时激活操作菜单
        "&:hover, &-active": {
          [`& ${componentCls}-menu-icon`]: {
            opacity: 0.6
          }
        },
        [`${componentCls}-menu-icon:hover`]: {
          opacity: 1
        }
      },
      // 会话名
      [`& ${componentCls}-label`]: {
        flex: 1,
        color: token.colorText,
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      },
      // 会话操作菜单
      [`& ${componentCls}-menu-icon`]: {
        opacity: 0,
        fontSize: token.fontSizeXL
      },
      // 会话图标
      [`& ${componentCls}-group-title`]: {
        display: "flex",
        alignItems: "center",
        height: token.controlHeightLG,
        minHeight: token.controlHeightLG,
        padding: `0 ${unit(token.paddingXS)}`
      }
    }
  };
};
var prepareComponentToken5 = () => ({});
var style_default5 = genStyleHooks("Conversations", (token) => {
  const compToken = merge(token, {});
  return genConversationsStyle(compToken);
}, prepareComponentToken5);

// node_modules/@ant-design/x/es/conversations/index.js
var Conversations = (props) => {
  const {
    prefixCls: customizePrefixCls,
    rootClassName,
    items,
    activeKey,
    defaultActiveKey,
    onActiveChange,
    menu,
    styles = {},
    classNames: classNames6 = {},
    groupable,
    className,
    style,
    ...restProps
  } = props;
  const domProps = pickAttrs(restProps, {
    attr: true,
    aria: true,
    data: true
  });
  const [mergedActiveKey, setMergedActiveKey] = useMergedState(defaultActiveKey, {
    value: activeKey
  });
  const [groupList, enableGroup] = useGroupable_default(groupable, items);
  const {
    getPrefixCls,
    direction
  } = use_x_provider_context_default();
  const prefixCls = getPrefixCls("conversations", customizePrefixCls);
  const contextConfig = use_x_component_config_default("conversations");
  const [wrapCSSVar, hashId, cssVarCls] = style_default5(prefixCls);
  const mergedCls = (0, import_classnames15.default)(prefixCls, contextConfig.className, className, rootClassName, hashId, cssVarCls, {
    [`${prefixCls}-rtl`]: direction === "rtl"
  });
  const onConversationItemClick = (info) => {
    setMergedActiveKey(info.key);
    if (onActiveChange) {
      onActiveChange(info.key);
    }
  };
  return wrapCSSVar(import_react28.default.createElement("ul", _extends({}, domProps, {
    style: {
      ...contextConfig.style,
      ...style
    },
    className: mergedCls
  }), groupList.map((groupInfo, groupIndex) => {
    var _a;
    const convItems = groupInfo.data.map((convInfo, convIndex) => import_react28.default.createElement(Item_default, {
      key: convInfo.key || `key-${convIndex}`,
      info: convInfo,
      prefixCls,
      direction,
      className: (0, import_classnames15.default)(classNames6.item, contextConfig.classNames.item),
      style: {
        ...contextConfig.styles.item,
        ...styles.item
      },
      menu: typeof menu === "function" ? menu(convInfo) : menu,
      active: mergedActiveKey === convInfo.key,
      onClick: onConversationItemClick
    }));
    if (enableGroup) {
      return import_react28.default.createElement("li", {
        key: groupInfo.name || `key-${groupIndex}`
      }, import_react28.default.createElement(GroupTitleContext.Provider, {
        value: {
          prefixCls
        }
      }, ((_a = groupInfo.title) == null ? void 0 : _a.call(groupInfo, groupInfo.name, {
        components: {
          GroupTitle: GroupTitle_default
        }
      })) || import_react28.default.createElement(GroupTitle_default, {
        key: groupInfo.name
      }, groupInfo.name)), import_react28.default.createElement("ul", {
        className: `${prefixCls}-list`
      }, convItems));
    }
    return convItems;
  })));
};
if (true) {
  Conversations.displayName = "Conversations";
}
var conversations_default = Conversations;

// node_modules/@ant-design/x/es/prompts/index.js
var import_classnames16 = __toESM(require_classnames());
var import_react29 = __toESM(require_react());

// node_modules/@ant-design/x/es/prompts/style/index.js
var genPromptsStyle = (token) => {
  const {
    componentCls
  } = token;
  return {
    [componentCls]: {
      // ======================== Prompt ========================
      "&, & *": {
        boxSizing: "border-box"
      },
      maxWidth: "100%",
      [`&${componentCls}-rtl`]: {
        direction: "rtl"
      },
      [`& ${componentCls}-title`]: {
        marginBlockStart: 0,
        fontWeight: "normal",
        color: token.colorTextTertiary
      },
      [`& ${componentCls}-list`]: {
        display: "flex",
        gap: token.paddingSM,
        overflowX: "auto",
        // Hide scrollbar
        scrollbarWidth: "none",
        "-ms-overflow-style": "none",
        "&::-webkit-scrollbar": {
          display: "none"
        },
        listStyle: "none",
        paddingInlineStart: 0,
        marginBlock: 0,
        alignItems: "stretch",
        "&-wrap": {
          flexWrap: "wrap"
        },
        "&-vertical": {
          flexDirection: "column",
          alignItems: "flex-start"
        }
      },
      // ========================= Item =========================
      [`${componentCls}-item`]: {
        flex: "none",
        display: "flex",
        gap: token.paddingXS,
        height: "auto",
        paddingBlock: token.paddingSM,
        paddingInline: token.padding,
        alignItems: "flex-start",
        justifyContent: "flex-start",
        background: token.colorBgContainer,
        borderRadius: token.borderRadiusLG,
        transition: ["border", "background"].map((p) => `${p} ${token.motionDurationSlow}`).join(","),
        border: `${unit(token.lineWidth)} ${token.lineType} ${token.colorBorderSecondary}`,
        [`&:not(${componentCls}-item-has-nest)`]: {
          "&:hover": {
            cursor: "pointer",
            background: token.colorFillTertiary
          },
          "&:active": {
            background: token.colorFill
          }
        },
        [`${componentCls}-content`]: {
          flex: "auto",
          minWidth: 0,
          display: "flex",
          gap: token.paddingXXS,
          flexDirection: "column",
          alignItems: "flex-start"
        },
        [`${componentCls}-icon, ${componentCls}-label, ${componentCls}-desc`]: {
          margin: 0,
          padding: 0,
          fontSize: token.fontSize,
          lineHeight: token.lineHeight,
          textAlign: "start",
          whiteSpace: "normal"
        },
        [`${componentCls}-label`]: {
          color: token.colorTextHeading,
          fontWeight: 500
        },
        [`${componentCls}-label + ${componentCls}-desc`]: {
          color: token.colorTextTertiary
        },
        // Disabled
        [`&${componentCls}-item-disabled`]: {
          pointerEvents: "none",
          background: token.colorBgContainerDisabled,
          [`${componentCls}-label, ${componentCls}-desc`]: {
            color: token.colorTextTertiary
          }
        }
      }
    }
  };
};
var genNestStyle = (token) => {
  const {
    componentCls
  } = token;
  return {
    [componentCls]: {
      // ========================= Parent =========================
      [`${componentCls}-item-has-nest`]: {
        [`> ${componentCls}-content`]: {
          // gap: token.paddingSM,
          [`> ${componentCls}-label`]: {
            fontSize: token.fontSizeLG,
            lineHeight: token.lineHeightLG
          }
        }
      },
      // ========================= Nested =========================
      [`&${componentCls}-nested`]: {
        marginTop: token.paddingXS,
        // ======================== Prompt ========================
        alignSelf: "stretch",
        [`${componentCls}-list`]: {
          alignItems: "stretch"
        },
        // ========================= Item =========================
        [`${componentCls}-item`]: {
          border: 0,
          background: token.colorFillQuaternary
        }
      }
    }
  };
};
var prepareComponentToken6 = () => ({});
var style_default6 = genStyleHooks("Prompts", (token) => {
  const compToken = merge(token, {});
  return [genPromptsStyle(compToken), genNestStyle(compToken)];
}, prepareComponentToken6);

// node_modules/@ant-design/x/es/prompts/index.js
var Prompts = (props) => {
  const {
    prefixCls: customizePrefixCls,
    title,
    className,
    items,
    onItemClick,
    vertical,
    wrap,
    rootClassName,
    styles = {},
    classNames: classNames6 = {},
    style,
    ...htmlProps
  } = props;
  const {
    getPrefixCls,
    direction
  } = use_x_provider_context_default();
  const prefixCls = getPrefixCls("prompts", customizePrefixCls);
  const contextConfig = use_x_component_config_default("prompts");
  const [wrapCSSVar, hashId, cssVarCls] = style_default6(prefixCls);
  const mergedCls = (0, import_classnames16.default)(prefixCls, contextConfig.className, className, rootClassName, hashId, cssVarCls, {
    [`${prefixCls}-rtl`]: direction === "rtl"
  });
  const mergedListCls = (0, import_classnames16.default)(`${prefixCls}-list`, contextConfig.classNames.list, classNames6.list, {
    [`${prefixCls}-list-wrap`]: wrap
  }, {
    [`${prefixCls}-list-vertical`]: vertical
  });
  return wrapCSSVar(import_react29.default.createElement("div", _extends({}, htmlProps, {
    className: mergedCls,
    style: {
      ...style,
      ...contextConfig.style
    }
  }), title && import_react29.default.createElement(typography_default.Title, {
    level: 5,
    className: (0, import_classnames16.default)(`${prefixCls}-title`, contextConfig.classNames.title, classNames6.title),
    style: {
      ...contextConfig.styles.title,
      ...styles.title
    }
  }, title), import_react29.default.createElement("div", {
    className: mergedListCls,
    style: {
      ...contextConfig.styles.list,
      ...styles.list
    }
  }, items == null ? void 0 : items.map((info, index) => {
    const isNest = info.children && info.children.length > 0;
    return import_react29.default.createElement("div", {
      key: info.key || `key_${index}`,
      style: {
        ...contextConfig.styles.item,
        ...styles.item
      },
      className: (0, import_classnames16.default)(`${prefixCls}-item`, contextConfig.classNames.item, classNames6.item, {
        [`${prefixCls}-item-disabled`]: info.disabled,
        [`${prefixCls}-item-has-nest`]: isNest
      }),
      onClick: () => {
        if (!isNest && onItemClick) {
          onItemClick({
            data: info
          });
        }
      }
    }, info.icon && import_react29.default.createElement("div", {
      className: `${prefixCls}-icon`
    }, info.icon), import_react29.default.createElement("div", {
      className: (0, import_classnames16.default)(`${prefixCls}-content`, contextConfig.classNames.itemContent, classNames6.itemContent),
      style: {
        ...contextConfig.styles.itemContent,
        ...styles.itemContent
      }
    }, info.label && import_react29.default.createElement("h6", {
      className: `${prefixCls}-label`
    }, info.label), info.description && import_react29.default.createElement("p", {
      className: `${prefixCls}-desc`
    }, info.description), isNest && import_react29.default.createElement(Prompts, {
      className: `${prefixCls}-nested`,
      items: info.children,
      vertical: true,
      onItemClick,
      classNames: {
        list: classNames6.subList,
        item: classNames6.subItem
      },
      styles: {
        list: styles.subList,
        item: styles.subItem
      }
    })));
  }))));
};
if (true) {
  Prompts.displayName = "Prompts";
}
var prompts_default = Prompts;

// node_modules/@ant-design/x/es/thought-chain/index.js
var import_classnames18 = __toESM(require_classnames());
var import_react32 = __toESM(require_react());

// node_modules/@ant-design/x/es/thought-chain/hooks/useCollapsible.js
var import_react30 = __toESM(require_react());

// node_modules/@ant-design/x/es/_util/motion.js
var getCollapsedHeight = () => ({
  height: 0,
  opacity: 0
});
var getRealHeight = (node) => {
  const {
    scrollHeight
  } = node;
  return {
    height: scrollHeight,
    opacity: 1
  };
};
var getCurrentHeight = (node) => ({
  height: node ? node.offsetHeight : 0
});
var skipOpacityTransition = (_, event) => (event == null ? void 0 : event.deadline) === true || event.propertyName === "height";
var initCollapseMotion = (rootCls = defaultPrefixCls) => ({
  motionName: `${rootCls}-motion-collapse`,
  onAppearStart: getCollapsedHeight,
  onEnterStart: getCollapsedHeight,
  onAppearActive: getRealHeight,
  onEnterActive: getRealHeight,
  onLeaveStart: getCurrentHeight,
  onLeaveActive: getCollapsedHeight,
  onAppearEnd: skipOpacityTransition,
  onEnterEnd: skipOpacityTransition,
  onLeaveEnd: skipOpacityTransition,
  motionDeadline: 500
});
var motion_default = initCollapseMotion;

// node_modules/@ant-design/x/es/thought-chain/hooks/useCollapsible.js
var useCollapsible = (collapsible, prefixCls, rootPrefixCls) => {
  const isThoughtChainUnControlled = typeof collapsible === "boolean" || (collapsible == null ? void 0 : collapsible.expandedKeys) === void 0;
  const [enableCollapse, customizeExpandedKeys, customizeOnExpand] = import_react30.default.useMemo(() => {
    let baseConfig = {
      expandedKeys: [],
      onExpand: () => {
      }
    };
    if (!collapsible) {
      return [false, baseConfig.expandedKeys, baseConfig.onExpand];
    }
    if (typeof collapsible === "object") {
      baseConfig = {
        ...baseConfig,
        ...collapsible
      };
    }
    return [true, baseConfig.expandedKeys, baseConfig.onExpand];
  }, [collapsible]);
  const [mergedExpandedKeys, setMergedExpandedKeys] = useMergedState(customizeExpandedKeys, {
    value: isThoughtChainUnControlled ? void 0 : customizeExpandedKeys,
    onChange: customizeOnExpand
  });
  const onItemExpand = (curKey) => {
    setMergedExpandedKeys((preKeys) => {
      const targetPreKeys = isThoughtChainUnControlled ? preKeys : customizeExpandedKeys;
      const keys = targetPreKeys.includes(curKey) ? targetPreKeys.filter((key) => key !== curKey) : [...targetPreKeys, curKey];
      customizeOnExpand == null ? void 0 : customizeOnExpand(keys);
      return keys;
    });
  };
  const collapseMotion = import_react30.default.useMemo(() => {
    if (!enableCollapse) return {};
    return {
      ...motion_default(rootPrefixCls),
      motionAppear: false,
      leavedClassName: `${prefixCls}-content-hidden`
    };
  }, [rootPrefixCls, prefixCls, enableCollapse]);
  return [enableCollapse, mergedExpandedKeys, enableCollapse ? onItemExpand : void 0, collapseMotion];
};
var useCollapsible_default = useCollapsible;

// node_modules/@ant-design/x/es/thought-chain/Item.js
var import_classnames17 = __toESM(require_classnames());
var import_react31 = __toESM(require_react());
var THOUGHT_CHAIN_ITEM_STATUS = function(THOUGHT_CHAIN_ITEM_STATUS2) {
  THOUGHT_CHAIN_ITEM_STATUS2["PENDING"] = "pending";
  THOUGHT_CHAIN_ITEM_STATUS2["SUCCESS"] = "success";
  THOUGHT_CHAIN_ITEM_STATUS2["ERROR"] = "error";
  return THOUGHT_CHAIN_ITEM_STATUS2;
}({});
var ThoughtChainNodeContext = import_react31.default.createContext(null);
var ThoughtChainNode = (props) => {
  const {
    info = {},
    nextStatus,
    onClick,
    ...restProps
  } = props;
  const domProps = pickAttrs(restProps, {
    attr: true,
    aria: true,
    data: true
  });
  const {
    prefixCls,
    collapseMotion,
    enableCollapse,
    expandedKeys,
    direction,
    classNames: classNames6 = {},
    styles = {}
  } = import_react31.default.useContext(ThoughtChainNodeContext);
  const id = import_react31.default.useId();
  const {
    key = id,
    icon,
    title,
    extra,
    content,
    footer,
    status,
    description
  } = info;
  const itemCls = `${prefixCls}-item`;
  const onThoughtChainNodeClick = () => onClick == null ? void 0 : onClick(key);
  const contentOpen = expandedKeys == null ? void 0 : expandedKeys.includes(key);
  return import_react31.default.createElement("div", _extends({}, domProps, {
    className: (0, import_classnames17.default)(itemCls, {
      [`${itemCls}-${status}${nextStatus ? `-${nextStatus}` : ""}`]: status
    }, props.className),
    style: props.style
  }), import_react31.default.createElement("div", {
    className: (0, import_classnames17.default)(`${itemCls}-header`, classNames6.itemHeader),
    style: styles.itemHeader,
    onClick: onThoughtChainNodeClick
  }, import_react31.default.createElement(avatar_default, {
    icon,
    className: `${itemCls}-icon`
  }), import_react31.default.createElement("div", {
    className: (0, import_classnames17.default)(`${itemCls}-header-box`, {
      [`${itemCls}-collapsible`]: enableCollapse && content
    })
  }, import_react31.default.createElement(typography_default.Text, {
    strong: true,
    ellipsis: {
      tooltip: {
        placement: direction === "rtl" ? "topRight" : "topLeft",
        title
      }
    },
    className: `${itemCls}-title`
  }, enableCollapse && content && (direction === "rtl" ? import_react31.default.createElement(LeftOutlined_default, {
    className: `${itemCls}-collapse-icon`,
    rotate: contentOpen ? -90 : 0
  }) : import_react31.default.createElement(RightOutlined_default, {
    className: `${itemCls}-collapse-icon`,
    rotate: contentOpen ? 90 : 0
  })), title), description && import_react31.default.createElement(typography_default.Text, {
    className: `${itemCls}-desc`,
    ellipsis: {
      tooltip: {
        placement: direction === "rtl" ? "topRight" : "topLeft",
        title: description
      }
    },
    type: "secondary"
  }, description)), extra && import_react31.default.createElement("div", {
    className: `${itemCls}-extra`
  }, extra)), content && import_react31.default.createElement(es_default, _extends({}, collapseMotion, {
    visible: enableCollapse ? contentOpen : true
  }), ({
    className: motionClassName,
    style
  }, motionRef) => import_react31.default.createElement("div", {
    className: (0, import_classnames17.default)(`${itemCls}-content`, motionClassName),
    ref: motionRef,
    style
  }, import_react31.default.createElement("div", {
    className: (0, import_classnames17.default)(`${itemCls}-content-box`, classNames6.itemContent),
    style: styles.itemContent
  }, content))), footer && import_react31.default.createElement("div", {
    className: (0, import_classnames17.default)(`${itemCls}-footer`, classNames6.itemFooter),
    style: styles.itemFooter
  }, footer));
};
var Item_default2 = ThoughtChainNode;

// node_modules/@ant-design/x/es/thought-chain/style/index.js
var genThoughtChainItemStatusStyle = (token) => {
  const {
    componentCls
  } = token;
  const itemCls = `${componentCls}-item`;
  const colors = {
    [THOUGHT_CHAIN_ITEM_STATUS.PENDING]: token.colorPrimaryText,
    [THOUGHT_CHAIN_ITEM_STATUS.SUCCESS]: token.colorSuccessText,
    [THOUGHT_CHAIN_ITEM_STATUS.ERROR]: token.colorErrorText
  };
  const statuses = Object.keys(colors);
  return statuses.reduce((acc, status) => {
    const statusColor = colors[status];
    statuses.forEach((nextStatus) => {
      const itemStatusCls = `& ${itemCls}-${status}-${nextStatus}`;
      const lastBeforePseudoStyle = status === nextStatus ? {} : {
        backgroundColor: "none !important",
        backgroundImage: `linear-gradient(${statusColor}, ${colors[nextStatus]})`
      };
      acc[itemStatusCls] = {
        [`& ${itemCls}-icon, & > *::before`]: {
          backgroundColor: `${statusColor} !important`
        },
        "& > :last-child::before": lastBeforePseudoStyle
      };
    });
    return acc;
  }, {});
};
var genThoughtChainItemBeforePseudoStyle = (token) => {
  const {
    calc,
    componentCls
  } = token;
  const itemCls = `${componentCls}-item`;
  const beforePseudoBaseStyle = {
    content: '""',
    width: calc(token.lineWidth).mul(2).equal(),
    display: "block",
    position: "absolute",
    insetInlineEnd: "none",
    backgroundColor: token.colorTextPlaceholder
  };
  return {
    "& > :last-child > :last-child": {
      "&::before": {
        display: "none !important"
      },
      [`&${itemCls}-footer`]: {
        "&::before": {
          display: "block !important",
          bottom: 0
        }
      }
    },
    [`& > ${itemCls}`]: {
      [`& ${itemCls}-header, & ${itemCls}-content, & ${itemCls}-footer`]: {
        position: "relative",
        "&::before": {
          bottom: calc(token.itemGap).mul(-1).equal()
        }
      },
      [`& ${itemCls}-header, & ${itemCls}-content`]: {
        marginInlineStart: calc(token.itemSize).mul(-1).equal(),
        "&::before": {
          ...beforePseudoBaseStyle,
          insetInlineStart: calc(token.itemSize).div(2).sub(token.lineWidth).equal()
        }
      },
      [`& ${itemCls}-header::before`]: {
        top: token.itemSize,
        bottom: calc(token.itemGap).mul(-2).equal()
      },
      [`& ${itemCls}-content::before`]: {
        top: "100%"
      },
      [`& ${itemCls}-footer::before`]: {
        ...beforePseudoBaseStyle,
        top: 0,
        insetInlineStart: calc(token.itemSize).div(-2).sub(token.lineWidth).equal()
      }
    }
  };
};
var genThoughtChainItemStyle = (token) => {
  const {
    componentCls
  } = token;
  const itemCls = `${componentCls}-item`;
  return {
    [itemCls]: {
      display: "flex",
      flexDirection: "column",
      [`& ${itemCls}-collapsible`]: {
        cursor: "pointer"
      },
      [`& ${itemCls}-header`]: {
        display: "flex",
        marginBottom: token.itemGap,
        gap: token.itemGap,
        alignItems: "flex-start",
        [`& ${itemCls}-icon`]: {
          height: token.itemSize,
          width: token.itemSize,
          fontSize: token.itemFontSize
        },
        [`& ${itemCls}-extra`]: {
          height: token.itemSize,
          maxHeight: token.itemSize
        },
        [`& ${itemCls}-header-box`]: {
          flex: 1,
          display: "flex",
          flexDirection: "column",
          overflow: "hidden",
          [`& ${itemCls}-title`]: {
            height: token.itemSize,
            lineHeight: `${unit(token.itemSize)}`,
            maxHeight: token.itemSize,
            fontSize: token.itemFontSize,
            [`& ${itemCls}-collapse-icon`]: {
              marginInlineEnd: token.marginXS
            }
          },
          [`& ${itemCls}-desc`]: {
            fontSize: token.itemFontSize
          }
        }
      },
      [`& ${itemCls}-content`]: {
        [`& ${itemCls}-content-hidden`]: {
          display: "none"
        },
        [`& ${itemCls}-content-box`]: {
          padding: token.itemGap,
          display: "inline-block",
          maxWidth: `calc(100% - ${token.itemSize})`,
          borderRadius: token.borderRadiusLG,
          backgroundColor: token.colorBgContainer,
          border: `${unit(token.lineWidth)} ${token.lineType} ${token.colorBorderSecondary}`
        }
      },
      [`& ${itemCls}-footer`]: {
        marginTop: token.itemGap,
        display: "inline-flex"
      }
    }
  };
};
var genThoughtChainSizeStyle = (token, size = "middle") => {
  const {
    componentCls
  } = token;
  const sizeTokens = {
    large: {
      itemSize: token.itemSizeLG,
      itemGap: token.itemGapLG,
      itemFontSize: token.itemFontSizeLG
    },
    middle: {
      itemSize: token.itemSize,
      itemGap: token.itemGap,
      itemFontSize: token.itemFontSize
    },
    small: {
      itemSize: token.itemSizeSM,
      itemGap: token.itemGapSM,
      itemFontSize: token.itemFontSizeSM
    }
  }[size];
  return {
    [`&${componentCls}-${size}`]: {
      paddingInlineStart: sizeTokens.itemSize,
      gap: sizeTokens.itemGap,
      ...genThoughtChainItemStyle({
        ...token,
        ...sizeTokens
      }),
      ...genThoughtChainItemBeforePseudoStyle({
        ...token,
        ...sizeTokens
      })
    }
  };
};
var genThoughtChainStyle = (token) => {
  const {
    componentCls
  } = token;
  return {
    [componentCls]: {
      display: "flex",
      flexDirection: "column",
      ...genThoughtChainItemStatusStyle(token),
      ...genThoughtChainSizeStyle(token),
      ...genThoughtChainSizeStyle(token, "large"),
      ...genThoughtChainSizeStyle(token, "small"),
      [`&${componentCls}-rtl`]: {
        direction: "rtl"
      }
    }
  };
};
var style_default7 = genStyleHooks("ThoughtChain", (token) => {
  const compToken = merge(token, {
    // small size tokens
    itemFontSizeSM: token.fontSizeSM,
    itemSizeSM: token.calc(token.controlHeightXS).add(token.controlHeightSM).div(2).equal(),
    itemGapSM: token.marginSM,
    // default size tokens
    itemFontSize: token.fontSize,
    itemSize: token.calc(token.controlHeightSM).add(token.controlHeight).div(2).equal(),
    itemGap: token.margin,
    // large size tokens
    itemFontSizeLG: token.fontSizeLG,
    itemSizeLG: token.calc(token.controlHeight).add(token.controlHeightLG).div(2).equal(),
    itemGapLG: token.marginLG
  });
  return [genThoughtChainStyle(compToken), collapse_default(compToken)];
});

// node_modules/@ant-design/x/es/thought-chain/index.js
var ThoughtChain = (props) => {
  const {
    prefixCls: customizePrefixCls,
    rootClassName,
    className,
    items,
    collapsible,
    styles = {},
    style,
    classNames: classNames6 = {},
    size = "middle",
    ...restProps
  } = props;
  const domProps = pickAttrs(restProps, {
    attr: true,
    aria: true,
    data: true
  });
  const {
    getPrefixCls,
    direction
  } = use_x_provider_context_default();
  const rootPrefixCls = getPrefixCls();
  const prefixCls = getPrefixCls("thought-chain", customizePrefixCls);
  const contextConfig = use_x_component_config_default("thoughtChain");
  const [enableCollapse, expandedKeys, onItemExpand, collapseMotion] = useCollapsible_default(collapsible, prefixCls, rootPrefixCls);
  const [wrapCSSVar, hashId, cssVarCls] = style_default7(prefixCls);
  const mergedCls = (0, import_classnames18.default)(className, rootClassName, prefixCls, contextConfig.className, hashId, cssVarCls, {
    [`${prefixCls}-rtl`]: direction === "rtl"
  }, `${prefixCls}-${size}`);
  return wrapCSSVar(import_react32.default.createElement("div", _extends({}, domProps, {
    className: mergedCls,
    style: {
      ...contextConfig.style,
      ...style
    }
  }), import_react32.default.createElement(ThoughtChainNodeContext.Provider, {
    value: {
      prefixCls,
      enableCollapse,
      collapseMotion,
      expandedKeys,
      direction,
      classNames: {
        itemHeader: (0, import_classnames18.default)(contextConfig.classNames.itemHeader, classNames6.itemHeader),
        itemContent: (0, import_classnames18.default)(contextConfig.classNames.itemContent, classNames6.itemContent),
        itemFooter: (0, import_classnames18.default)(contextConfig.classNames.itemFooter, classNames6.itemFooter)
      },
      styles: {
        itemHeader: {
          ...contextConfig.styles.itemHeader,
          ...styles.itemHeader
        },
        itemContent: {
          ...contextConfig.styles.itemContent,
          ...styles.itemContent
        },
        itemFooter: {
          ...contextConfig.styles.itemFooter,
          ...styles.itemFooter
        }
      }
    }
  }, items == null ? void 0 : items.map((item, index) => {
    var _a;
    return import_react32.default.createElement(Item_default2, {
      key: item.key || `key_${index}`,
      className: (0, import_classnames18.default)(contextConfig.classNames.item, classNames6.item),
      style: {
        ...contextConfig.styles.item,
        ...styles.item
      },
      info: {
        ...item,
        icon: item.icon || index + 1
      },
      onClick: onItemExpand,
      nextStatus: ((_a = items[index + 1]) == null ? void 0 : _a.status) || item.status
    });
  }))));
};
if (true) {
  ThoughtChain.displayName = "ThoughtChain";
}
var thought_chain_default = ThoughtChain;

// node_modules/@ant-design/x/es/suggestion/index.js
var import_classnames19 = __toESM(require_classnames());
var import_react34 = __toESM(require_react());

// node_modules/@ant-design/x/es/suggestion/style/index.js
var genSuggestionStyle = (token) => {
  const {
    componentCls,
    antCls
  } = token;
  return {
    [componentCls]: {
      [`${antCls}-cascader-menus ${antCls}-cascader-menu`]: {
        height: "auto"
      },
      [`${componentCls}-item`]: {
        "&-icon": {
          marginInlineEnd: token.paddingXXS
        },
        "&-extra": {
          marginInlineStart: token.padding
        }
      },
      [`&${componentCls}-block`]: {
        [`${componentCls}-item-extra`]: {
          marginInlineStart: "auto"
        }
      }
    }
  };
};
var prepareComponentToken7 = () => ({});
var style_default8 = genStyleHooks("Suggestion", (token) => {
  const SuggestionToken = merge(token, {});
  return genSuggestionStyle(SuggestionToken);
}, prepareComponentToken7);

// node_modules/@ant-design/x/es/suggestion/useActive.js
var import_react33 = __toESM(require_react());
function useActive(items, open, rtl, onSelect, onCancel) {
  const [activePaths, setActivePaths] = import_react33.default.useState([]);
  const getItems = (colIndex, paths = activePaths) => {
    let currentItems = items;
    for (let i = 0; i < colIndex - 1; i += 1) {
      const activePath = paths[i];
      const activeItem = currentItems.find((item) => item.value === activePath);
      if (!activeItem) {
        break;
      }
      currentItems = activeItem.children || [];
    }
    return currentItems;
  };
  const getValues = (paths) => {
    return paths.map((path, index) => {
      const currentItems = getItems(index + 1, paths);
      const currentItem = currentItems.find((item) => item.value === path);
      return currentItem == null ? void 0 : currentItem.value;
    });
  };
  const offsetRow = (offset) => {
    const currentColIndex = activePaths.length || 1;
    const currentItems = getItems(currentColIndex);
    const currentRowIndex = currentItems.findIndex((item) => item.value === activePaths[currentColIndex - 1]);
    const itemCount = currentItems.length;
    const nextItem = currentItems[(currentRowIndex + offset + itemCount) % itemCount];
    setActivePaths([...activePaths.slice(0, currentColIndex - 1), nextItem.value]);
  };
  const offsetPrev = () => {
    if (activePaths.length > 1) {
      setActivePaths(activePaths.slice(0, activePaths.length - 1));
    }
  };
  const offsetNext = () => {
    const nextItems = getItems(activePaths.length + 1);
    if (nextItems.length) {
      setActivePaths([...activePaths, nextItems[0].value]);
    }
  };
  const onKeyDown = useEvent((e) => {
    if (!open) {
      return;
    }
    switch (e.key) {
      case "ArrowDown":
        offsetRow(1);
        e.preventDefault();
        break;
      case "ArrowUp":
        offsetRow(-1);
        e.preventDefault();
        break;
      case "ArrowRight":
        if (rtl) {
          offsetPrev();
        } else {
          offsetNext();
        }
        e.preventDefault();
        break;
      case "ArrowLeft":
        if (rtl) {
          offsetNext();
        } else {
          offsetPrev();
        }
        e.preventDefault();
        break;
      case "Enter":
        if (!getItems(activePaths.length + 1).length) {
          onSelect(getValues(activePaths));
        }
        e.preventDefault();
        break;
      case "Escape":
        onCancel();
        e.preventDefault();
        break;
    }
  });
  import_react33.default.useEffect(() => {
    if (open) {
      setActivePaths([items[0].value]);
    }
  }, [open]);
  return [activePaths, onKeyDown];
}

// node_modules/@ant-design/x/es/suggestion/index.js
var antdVersionCells = version_default.split(".").map(Number);
var isNewAPI = antdVersionCells[0] > 5 || antdVersionCells[0] === 5 && antdVersionCells[1] >= 25;
function Suggestion(props) {
  const {
    prefixCls: customizePrefixCls,
    className,
    rootClassName,
    style,
    children,
    open,
    onOpenChange,
    items,
    onSelect,
    block
  } = props;
  const {
    direction,
    getPrefixCls
  } = use_x_provider_context_default();
  const prefixCls = getPrefixCls("suggestion", customizePrefixCls);
  const itemCls = `${prefixCls}-item`;
  const isRTL = direction === "rtl";
  const contextConfig = use_x_component_config_default("suggestion");
  const [wrapCSSVar, hashId, cssVarCls] = style_default8(prefixCls);
  const [mergedOpen, setOpen] = useMergedState(false, {
    value: open
  });
  const [info, setInfo] = (0, import_react34.useState)();
  const triggerOpen = (nextOpen) => {
    setOpen(nextOpen);
    onOpenChange == null ? void 0 : onOpenChange(nextOpen);
  };
  const onTrigger = useEvent((nextInfo) => {
    if (nextInfo === false) {
      triggerOpen(false);
    } else {
      setInfo(nextInfo);
      triggerOpen(true);
    }
  });
  const onClose = () => {
    triggerOpen(false);
  };
  const itemList = import_react34.default.useMemo(() => typeof items === "function" ? items(info) : items, [items, info]);
  const optionRender = (node) => {
    return import_react34.default.createElement(flex_default, {
      className: itemCls
    }, node.icon && import_react34.default.createElement("div", {
      className: `${itemCls}-icon`
    }, node.icon), node.label, node.extra && import_react34.default.createElement("div", {
      className: `${itemCls}-extra`
    }, node.extra));
  };
  const onInternalChange = (valuePath) => {
    if (onSelect) {
      onSelect(valuePath[valuePath.length - 1]);
    }
    triggerOpen(false);
  };
  const [activePath, onKeyDown] = useActive(itemList, mergedOpen, isRTL, onInternalChange, onClose);
  const childNode = children == null ? void 0 : children({
    onTrigger,
    onKeyDown
  });
  const onInternalOpenChange = (nextOpen) => {
    if (!nextOpen) {
      onClose();
    }
  };
  const compatibleProps = {};
  if (isNewAPI) {
    compatibleProps.onOpenChange = onInternalOpenChange;
  } else {
    compatibleProps.onDropdownVisibleChange = onInternalOpenChange;
  }
  return wrapCSSVar(import_react34.default.createElement(cascader_default, _extends({
    options: itemList,
    open: mergedOpen,
    value: activePath,
    placement: isRTL ? "topRight" : "topLeft"
  }, compatibleProps, {
    optionRender,
    rootClassName: (0, import_classnames19.default)(rootClassName, prefixCls, hashId, cssVarCls, {
      [`${prefixCls}-block`]: block
    }),
    onChange: onInternalChange,
    dropdownMatchSelectWidth: block
  }), import_react34.default.createElement("div", {
    className: (0, import_classnames19.default)(prefixCls, contextConfig.className, rootClassName, className, `${prefixCls}-wrapper`, hashId, cssVarCls),
    style: {
      ...contextConfig.style,
      ...style
    }
  }, childNode)));
}
if (true) {
  Suggestion.displayName = "Suggestion";
}
var suggestion_default = Suggestion;

// node_modules/@ant-design/x/es/welcome/index.js
var import_classnames20 = __toESM(require_classnames());
var import_react35 = __toESM(require_react());

// node_modules/@ant-design/x/es/welcome/style/index.js
var genWelcomeStyle = (token) => {
  const {
    componentCls,
    calc
  } = token;
  const titleHeight = calc(token.fontSizeHeading3).mul(token.lineHeightHeading3).equal();
  const descHeight = calc(token.fontSize).mul(token.lineHeight).equal();
  return {
    [componentCls]: {
      gap: token.padding,
      // ======================== Icon ========================
      [`${componentCls}-icon`]: {
        height: calc(titleHeight).add(descHeight).add(token.paddingXXS).equal(),
        display: "flex",
        img: {
          height: "100%"
        }
      },
      // ==================== Content Wrap ====================
      [`${componentCls}-content-wrapper`]: {
        gap: token.paddingXS,
        flex: "auto",
        minWidth: 0,
        [`${componentCls}-title-wrapper`]: {
          gap: token.paddingXS
        },
        [`${componentCls}-title`]: {
          margin: 0
        },
        [`${componentCls}-extra`]: {
          marginInlineStart: "auto"
        }
      }
    }
  };
};
var genVariantStyle2 = (token) => {
  const {
    componentCls
  } = token;
  return {
    [componentCls]: {
      // ======================== Filled ========================
      "&-filled": {
        paddingInline: token.padding,
        paddingBlock: token.paddingSM,
        background: token.colorFillContent,
        borderRadius: token.borderRadiusLG
      },
      // ====================== Borderless ======================
      "&-borderless": {
        [`${componentCls}-title`]: {
          fontSize: token.fontSizeHeading3,
          lineHeight: token.lineHeightHeading3
        }
      }
    }
  };
};
var prepareComponentToken8 = () => ({});
var style_default9 = genStyleHooks("Welcome", (token) => {
  const compToken = merge(token, {});
  return [genWelcomeStyle(compToken), genVariantStyle2(compToken)];
}, prepareComponentToken8);

// node_modules/@ant-design/x/es/welcome/index.js
function Welcome(props, ref) {
  const {
    prefixCls: customizePrefixCls,
    rootClassName,
    className,
    style,
    variant = "filled",
    // Semantic
    classNames: classNames6 = {},
    styles = {},
    // Layout
    icon,
    title,
    description,
    extra
  } = props;
  const {
    direction,
    getPrefixCls
  } = use_x_provider_context_default();
  const prefixCls = getPrefixCls("welcome", customizePrefixCls);
  const contextConfig = use_x_component_config_default("welcome");
  const [wrapCSSVar, hashId, cssVarCls] = style_default9(prefixCls);
  const iconNode = import_react35.default.useMemo(() => {
    if (!icon) {
      return null;
    }
    let iconEle = icon;
    if (typeof icon === "string" && icon.startsWith("http")) {
      iconEle = import_react35.default.createElement("img", {
        src: icon,
        alt: "icon"
      });
    }
    return import_react35.default.createElement("div", {
      className: (0, import_classnames20.default)(`${prefixCls}-icon`, contextConfig.classNames.icon, classNames6.icon),
      style: styles.icon
    }, iconEle);
  }, [icon]);
  const titleNode = import_react35.default.useMemo(() => {
    if (!title) {
      return null;
    }
    return import_react35.default.createElement(typography_default.Title, {
      level: 4,
      className: (0, import_classnames20.default)(`${prefixCls}-title`, contextConfig.classNames.title, classNames6.title),
      style: styles.title
    }, title);
  }, [title]);
  const extraNode = import_react35.default.useMemo(() => {
    if (!extra) {
      return null;
    }
    return import_react35.default.createElement("div", {
      className: (0, import_classnames20.default)(`${prefixCls}-extra`, contextConfig.classNames.extra, classNames6.extra),
      style: styles.extra
    }, extra);
  }, [extra]);
  return wrapCSSVar(import_react35.default.createElement(flex_default, {
    ref,
    className: (0, import_classnames20.default)(prefixCls, contextConfig.className, className, rootClassName, hashId, cssVarCls, `${prefixCls}-${variant}`, {
      [`${prefixCls}-rtl`]: direction === "rtl"
    }),
    style
  }, iconNode, import_react35.default.createElement(flex_default, {
    vertical: true,
    className: `${prefixCls}-content-wrapper`
  }, extra ? import_react35.default.createElement(flex_default, {
    align: "flex-start",
    className: `${prefixCls}-title-wrapper`
  }, titleNode, extraNode) : titleNode, description && import_react35.default.createElement(typography_default.Text, {
    className: (0, import_classnames20.default)(`${prefixCls}-description`, contextConfig.classNames.description, classNames6.description),
    style: styles.description
  }, description))));
}
var ForwardWelcome = import_react35.default.forwardRef(Welcome);
if (true) {
  ForwardWelcome.displayName = "Welcome";
}
var welcome_default = ForwardWelcome;

// node_modules/@ant-design/x/es/use-x-chat/index.js
var import_react37 = __toESM(require_react());

// node_modules/@ant-design/x/es/use-x-chat/useSyncState.js
var import_react36 = __toESM(require_react());
function useSyncState(defaultValue) {
  const [, forceUpdate] = import_react36.default.useState(0);
  const stateRef = import_react36.default.useRef(typeof defaultValue === "function" ? defaultValue() : defaultValue);
  const setState = import_react36.default.useCallback((action) => {
    stateRef.current = typeof action === "function" ? action(stateRef.current) : action;
    forceUpdate((prev) => prev + 1);
  }, []);
  const getState = import_react36.default.useCallback(() => stateRef.current, []);
  return [stateRef.current, setState, getState];
}

// node_modules/@ant-design/x/es/use-x-chat/index.js
function toArray(item) {
  return Array.isArray(item) ? item : [item];
}
function useXChat(config) {
  const {
    defaultMessages,
    agent,
    requestFallback,
    requestPlaceholder,
    parser,
    transformMessage,
    transformStream,
    resolveAbortController
  } = config;
  const idRef = import_react37.default.useRef(0);
  const [messages, setMessages, getMessages] = useSyncState(() => (defaultMessages || []).map((info, index) => ({
    id: `default_${index}`,
    status: "local",
    ...info
  })));
  const createMessage = (message, status) => {
    const msg = {
      id: `msg_${idRef.current}`,
      message,
      status
    };
    idRef.current += 1;
    return msg;
  };
  const parsedMessages = import_react37.default.useMemo(() => {
    const list = [];
    messages.forEach((agentMsg) => {
      const rawParsedMsg = parser ? parser(agentMsg.message) : agentMsg.message;
      const bubbleMsgs = toArray(rawParsedMsg);
      bubbleMsgs.forEach((bubbleMsg, bubbleMsgIndex) => {
        let key = agentMsg.id;
        if (bubbleMsgs.length > 1) {
          key = `${key}_${bubbleMsgIndex}`;
        }
        list.push({
          id: key,
          message: bubbleMsg,
          status: agentMsg.status
        });
      });
    });
    return list;
  }, [messages]);
  const getFilteredMessages = (msgs) => msgs.filter((info) => info.status !== "loading" && info.status !== "error").map((info) => info.message);
  const getRequestMessages = () => getFilteredMessages(getMessages());
  const getTransformMessage = (params) => {
    const {
      chunk,
      chunks,
      originMessage
    } = params;
    if (typeof transformMessage === "function") {
      return transformMessage(params);
    }
    if (chunk) {
      return chunk;
    }
    if (Array.isArray(chunks)) {
      const chunk2 = (chunks == null ? void 0 : chunks.length) > 0 ? chunks == null ? void 0 : chunks[(chunks == null ? void 0 : chunks.length) - 1] : void 0;
      return originMessage ? originMessage : chunk2;
    }
    return chunks;
  };
  const onRequest = useEvent((requestParams) => {
    if (!agent) throw new Error("The agent parameter is required when using the onRequest method in an agent generated by useXAgent.");
    let loadingMsgId = null;
    let message;
    let otherRequestParams = {};
    if (requestParams && typeof requestParams === "object" && "message" in requestParams) {
      const {
        message: requestParamsMessage,
        ...other
      } = requestParams;
      message = requestParamsMessage;
      otherRequestParams = other;
    } else {
      message = requestParams;
    }
    setMessages((ori) => {
      let nextMessages = [...ori, createMessage(message, "local")];
      if (requestPlaceholder) {
        let placeholderMsg;
        if (typeof requestPlaceholder === "function") {
          placeholderMsg = requestPlaceholder(message, {
            messages: getFilteredMessages(nextMessages)
          });
        } else {
          placeholderMsg = requestPlaceholder;
        }
        const loadingMsg = createMessage(placeholderMsg, "loading");
        loadingMsgId = loadingMsg.id;
        nextMessages = [...nextMessages, loadingMsg];
      }
      return nextMessages;
    });
    let updatingMsgId = null;
    const updateMessage = (status, chunk, chunks) => {
      let msg = getMessages().find((info) => info.id === updatingMsgId);
      if (!msg) {
        const transformData = getTransformMessage({
          chunk,
          status,
          chunks
        });
        msg = createMessage(transformData, status);
        setMessages((ori) => {
          const oriWithoutPending = ori.filter((info) => info.id !== loadingMsgId);
          return [...oriWithoutPending, msg];
        });
        updatingMsgId = msg.id;
      } else {
        setMessages((ori) => {
          return ori.map((info) => {
            if (info.id === updatingMsgId) {
              const transformData = getTransformMessage({
                originMessage: info.message,
                chunk,
                chunks,
                status
              });
              return {
                ...info,
                message: transformData,
                status
              };
            }
            return info;
          });
        });
      }
      return msg;
    };
    agent.request({
      message,
      messages: getRequestMessages(),
      ...otherRequestParams
    }, {
      onUpdate: (chunk) => {
        updateMessage("loading", chunk, []);
      },
      onSuccess: (chunks) => {
        updateMessage("success", void 0, chunks);
      },
      onError: async (error) => {
        if (requestFallback) {
          let fallbackMsg;
          if (typeof requestFallback === "function") {
            fallbackMsg = await requestFallback(message, {
              error,
              messages: getRequestMessages()
            });
          } else {
            fallbackMsg = requestFallback;
          }
          setMessages((ori) => [...ori.filter((info) => info.id !== loadingMsgId && info.id !== updatingMsgId), createMessage(fallbackMsg, "error")]);
        } else {
          setMessages((ori) => {
            return ori.filter((info) => info.id !== loadingMsgId && info.id !== updatingMsgId);
          });
        }
      },
      onStream: (controller) => {
        resolveAbortController == null ? void 0 : resolveAbortController(controller);
      }
    }, transformStream);
  });
  return {
    onRequest,
    messages,
    parsedMessages,
    setMessages
  };
}

// node_modules/@ant-design/x/es/use-x-agent/index.js
var import_react38 = __toESM(require_react());

// node_modules/@ant-design/x/es/x-stream/index.js
var DEFAULT_STREAM_SEPARATOR = "\n\n";
var DEFAULT_PART_SEPARATOR = "\n";
var DEFAULT_KV_SEPARATOR = ":";
var isValidString = (str) => (str ?? "").trim() !== "";
function splitStream() {
  let buffer = "";
  return new TransformStream({
    transform(streamChunk, controller) {
      buffer += streamChunk;
      const parts = buffer.split(DEFAULT_STREAM_SEPARATOR);
      parts.slice(0, -1).forEach((part) => {
        if (isValidString(part)) {
          controller.enqueue(part);
        }
      });
      buffer = parts[parts.length - 1];
    },
    flush(controller) {
      if (isValidString(buffer)) {
        controller.enqueue(buffer);
      }
    }
  });
}
function splitPart() {
  return new TransformStream({
    transform(partChunk, controller) {
      const lines = partChunk.split(DEFAULT_PART_SEPARATOR);
      const sseEvent = lines.reduce((acc, line) => {
        const separatorIndex = line.indexOf(DEFAULT_KV_SEPARATOR);
        if (separatorIndex === -1) {
          throw new Error(`The key-value separator "${DEFAULT_KV_SEPARATOR}" is not found in the sse line chunk!`);
        }
        const key = line.slice(0, separatorIndex);
        if (!isValidString(key)) return acc;
        const value = line.slice(separatorIndex + 1);
        return {
          ...acc,
          [key]: value
        };
      }, {});
      if (Object.keys(sseEvent).length === 0) return;
      controller.enqueue(sseEvent);
    }
  });
}
function XStream(options) {
  const {
    readableStream,
    transformStream
  } = options;
  if (!(readableStream instanceof ReadableStream)) {
    throw new Error("The options.readableStream must be an instance of ReadableStream.");
  }
  const decoderStream = new TextDecoderStream();
  const stream = transformStream ? (
    /**
     * Uint8Array binary -> string -> Output
     */
    readableStream.pipeThrough(decoderStream).pipeThrough(transformStream)
  ) : (
    /**
     * Uint8Array binary -> string -> SSE part string -> Default Output {@link SSEOutput}
     */
    readableStream.pipeThrough(decoderStream).pipeThrough(splitStream()).pipeThrough(splitPart())
  );
  stream[Symbol.asyncIterator] = async function* () {
    const reader = this.getReader();
    while (true) {
      const {
        done,
        value
      } = await reader.read();
      if (done) break;
      if (!value) continue;
      yield value;
    }
  };
  return stream;
}
var x_stream_default = XStream;

// node_modules/@ant-design/x/es/x-request/x-fetch.js
var XFetch = async (baseURL, options = {}) => {
  const {
    fetch: fetchFn = globalThis.fetch,
    middlewares = {},
    ...requestInit
  } = options;
  if (typeof fetchFn !== "function") {
    throw new Error("The options.fetch must be a typeof fetch function!");
  }
  let fetchArgs = [baseURL, requestInit];
  if (typeof middlewares.onRequest === "function") {
    const modifiedFetchArgs = await middlewares.onRequest(...fetchArgs);
    fetchArgs = modifiedFetchArgs;
  }
  let response = await fetchFn(...fetchArgs);
  if (typeof middlewares.onResponse === "function") {
    const modifiedResponse = await middlewares.onResponse(response);
    if (!(modifiedResponse instanceof Response)) {
      throw new Error("The options.onResponse must return a Response instance!");
    }
    response = modifiedResponse;
  }
  if (!response.ok) {
    throw new Error(`Fetch failed with status ${response.status}`);
  }
  if (!response.body) {
    throw new Error("The response body is empty.");
  }
  return response;
};
var x_fetch_default = XFetch;

// node_modules/@ant-design/x/es/x-request/index.js
var XRequestClass = class _XRequestClass {
  constructor(options) {
    __publicField(this, "baseURL");
    __publicField(this, "model");
    __publicField(this, "defaultHeaders");
    __publicField(this, "customOptions");
    __publicField(this, "create", async (params, callbacks, transformStream) => {
      var _a, _b;
      const abortController = new AbortController();
      const requestInit = {
        method: "POST",
        body: JSON.stringify({
          model: this.model,
          ...params
        }),
        headers: this.defaultHeaders,
        signal: abortController.signal
      };
      (_a = callbacks == null ? void 0 : callbacks.onStream) == null ? void 0 : _a.call(callbacks, abortController);
      try {
        const response = await x_fetch_default(this.baseURL, {
          fetch: this.customOptions.fetch,
          ...requestInit
        });
        if (transformStream) {
          await this.customResponseHandler(response, callbacks, transformStream);
          return;
        }
        const contentType = response.headers.get("content-type") || "";
        const mimeType = contentType.split(";")[0].trim();
        switch (mimeType) {
          case "text/event-stream":
            await this.sseResponseHandler(response, callbacks);
            break;
          case "application/json":
            await this.jsonResponseHandler(response, callbacks);
            break;
          default:
            throw new Error(`The response content-type: ${contentType} is not support!`);
        }
      } catch (error) {
        const err = error instanceof Error ? error : new Error("Unknown error!");
        (_b = callbacks == null ? void 0 : callbacks.onError) == null ? void 0 : _b.call(callbacks, err);
        throw err;
      }
    });
    __publicField(this, "customResponseHandler", async (response, callbacks, transformStream) => {
      var _a, _b;
      const chunks = [];
      for await (const chunk of x_stream_default({
        readableStream: response.body,
        transformStream
      })) {
        chunks.push(chunk);
        (_a = callbacks == null ? void 0 : callbacks.onUpdate) == null ? void 0 : _a.call(callbacks, chunk);
      }
      (_b = callbacks == null ? void 0 : callbacks.onSuccess) == null ? void 0 : _b.call(callbacks, chunks);
    });
    __publicField(this, "sseResponseHandler", async (response, callbacks) => {
      var _a, _b;
      const chunks = [];
      const stream = x_stream_default({
        readableStream: response.body
      });
      for await (const chunk of stream) {
        chunks.push(chunk);
        (_a = callbacks == null ? void 0 : callbacks.onUpdate) == null ? void 0 : _a.call(callbacks, chunk);
      }
      (_b = callbacks == null ? void 0 : callbacks.onSuccess) == null ? void 0 : _b.call(callbacks, chunks);
    });
    __publicField(this, "jsonResponseHandler", async (response, callbacks) => {
      var _a, _b;
      const chunk = await response.json();
      (_a = callbacks == null ? void 0 : callbacks.onUpdate) == null ? void 0 : _a.call(callbacks, chunk);
      (_b = callbacks == null ? void 0 : callbacks.onSuccess) == null ? void 0 : _b.call(callbacks, [chunk]);
    });
    const {
      baseURL,
      model,
      dangerouslyApiKey,
      ...customOptions
    } = options;
    this.baseURL = options.baseURL;
    this.model = options.model;
    this.defaultHeaders = {
      "Content-Type": "application/json",
      ...options.dangerouslyApiKey && {
        Authorization: options.dangerouslyApiKey
      }
    };
    this.customOptions = customOptions;
  }
  static init(options) {
    if (!options.baseURL || typeof options.baseURL !== "string") throw new Error("The baseURL is not valid!");
    return new _XRequestClass(options);
  }
};
var XRequest = XRequestClass.init;
var x_request_default = XRequest;

// node_modules/@ant-design/x/es/use-x-agent/index.js
var uuid = 0;
var XAgent = class {
  constructor(config) {
    __publicField(this, "config");
    __publicField(this, "requestingMap", {});
    __publicField(this, "request", (info, callbacks, transformStream) => {
      const {
        request
      } = this.config;
      const {
        onUpdate,
        onSuccess,
        onError,
        onStream
      } = callbacks;
      const id = uuid;
      uuid += 1;
      this.requestingMap[id] = true;
      request == null ? void 0 : request(info, {
        onStream: (abortController) => {
          if (this.requestingMap[id]) {
            onStream == null ? void 0 : onStream(abortController);
          }
        },
        // Status should be unique.
        // One get success or error should not get more message
        onUpdate: (chunk) => {
          if (this.requestingMap[id]) {
            onUpdate(chunk);
          }
        },
        onSuccess: (chunks) => {
          if (this.requestingMap[id]) {
            onSuccess(chunks);
            this.finishRequest(id);
          }
        },
        onError: (error) => {
          if (this.requestingMap[id]) {
            onError(error);
            this.finishRequest(id);
          }
        }
      }, transformStream);
    });
    this.config = config;
  }
  finishRequest(id) {
    delete this.requestingMap[id];
  }
  isRequesting() {
    return Object.keys(this.requestingMap).length > 0;
  }
};
function useXAgent(config) {
  const {
    request,
    ...restConfig
  } = config;
  return import_react38.default.useMemo(() => [new XAgent({
    request: request || x_request_default({
      baseURL: restConfig.baseURL,
      model: restConfig.model,
      dangerouslyApiKey: restConfig.dangerouslyApiKey
    }).create,
    ...restConfig
  })], [config == null ? void 0 : config.baseURL, config == null ? void 0 : config.dangerouslyApiKey, config == null ? void 0 : config.model]);
}
export {
  actions_default as Actions,
  attachments_default as Attachments,
  bubble_default as Bubble,
  conversations_default as Conversations,
  prompts_default as Prompts,
  sender_default as Sender,
  suggestion_default as Suggestion,
  thought_chain_default as ThoughtChain,
  welcome_default as Welcome,
  x_provider_default as XProvider,
  x_request_default as XRequest,
  x_stream_default as XStream,
  useXAgent,
  useXChat,
  version_default3 as version
};
//# sourceMappingURL=@ant-design_x.js.map
